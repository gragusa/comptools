[
  {
    "objectID": "junk/index.html",
    "href": "junk/index.html",
    "title": "Computational Tools for Macroeconometrics (AAF2351)",
    "section": "",
    "text": "Prof. Giuseppe Ragusa\n   Sapienza, University of Rome\n   Department of Economics and Law\n   Viale del Castro Laurenziano, 9\n   giuseppe.ragusa at uniroma1 dot it\n   Office Hour:\n\n\n\n\n\n   Friday\n   19 february, 2024 - 30 may 2024\n   12:00-14:00\n   Ecodir"
  },
  {
    "objectID": "junk/index.html#description",
    "href": "junk/index.html#description",
    "title": "Computational Tools for Macroeconometrics (AAF2351)",
    "section": "Description",
    "text": "Description\nComputational Tools for Macroeconometrics (AAF2351) covers the computational aspects of time series. It begins with an overview of the computational challenges inherent in macroeconomic data analysis and the pivotal role of software tools, with a particular focus on Python, Julia and R. The syllabus covers a broad range of topics starting gong from forecasting to nonlinear optimization and simulations.\nThe course is structured as an interactive lab, emphasizing a hands-on learning approach through practical assignments. In this lab environment, students are expected to learn by doing, applying the theoretical knowledge acquired in lectures to real-world data and scenarios."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Computational Tools for Macroeconometrics (AAF2351)",
    "section": "",
    "text": "Prof. Giuseppe Ragusa\n   Sapienza, University of Rome\n   Department of Economics and Law\n   Viale del Castro Laurenziano, 9\n   giuseppe.ragusa at uniroma1 dot it\n   Office Hour:\n\n\n\n\n\n   Friday\n   19 february, 2024 - 30 may 2024\n   12:00-14:00\n   Ecodir"
  },
  {
    "objectID": "index.html#description",
    "href": "index.html#description",
    "title": "Computational Tools for Macroeconometrics (AAF2351)",
    "section": "Description",
    "text": "Description\nComputational Tools for Macroeconometrics (AAF2351) covers the computational aspects of time series. It begins with an overview of the computational challenges inherent in macroeconomic data analysis and the pivotal role of software tools, with a particular focus on Python, Julia and R. The syllabus covers a broad range of topics starting gong from forecasting to nonlinear optimization and simulations.\nThe course is structured as an interactive lab, emphasizing a hands-on learning approach through practical assignments. In this lab environment, students are expected to learn by doing, applying the theoretical knowledge acquired in lectures to real-world data and scenarios."
  },
  {
    "objectID": "comptools_ass1.html",
    "href": "comptools_ass1.html",
    "title": "Computational Tools for Macroeconometrics",
    "section": "",
    "text": "This assignment introduces students to practical and theoretical aspects of macroeconometrics, focusing on forecasting using the FRED-MD dataset. Students will learn to handle macroeconomic data, perform necessary transformations, apply univariate models to predict key economic indicators and to evaluate these forecasts."
  },
  {
    "objectID": "comptools_ass1.html#introduction",
    "href": "comptools_ass1.html#introduction",
    "title": "Computational Tools for Macroeconometrics",
    "section": "",
    "text": "This assignment introduces students to practical and theoretical aspects of macroeconometrics, focusing on forecasting using the FRED-MD dataset. Students will learn to handle macroeconomic data, perform necessary transformations, apply univariate models to predict key economic indicators and to evaluate these forecasts."
  },
  {
    "objectID": "comptools_ass1.html#the-fred-md-dataset",
    "href": "comptools_ass1.html#the-fred-md-dataset",
    "title": "Computational Tools for Macroeconometrics",
    "section": "The FRED-MD dataset",
    "text": "The FRED-MD dataset\nThe FRED-MD dataset is a comprehensive monthly database for macroeconomic research compiled by the Federal Reserve Bank of St. Louis. It features a wide array of economic indicators. The list of economic indicators can be obtained from the paper accompanying the data pdf.\nThe data can be downloaded here. The page contains all the different vintages of the data.\nLet us start to download the current.csv file:\n\nimport pandas as pd\n\n# Load the dataset\ndf = pd.read_csv('~/Downloads/current.csv')\n\n# Clean the DataFrame by removing the row with transformation codes\ndf_cleaned = df.drop(index=0)\ndf_cleaned.reset_index(drop=True, inplace=True)\ndf_cleaned['sasdate'] = pd.to_datetime(df_cleaned['sasdate'], format='%m/%d/%Y')\ndf_cleaned\n\n\n\n\n\n\n\n\n\nsasdate\nRPI\nW875RX1\nDPCERA3M086SBEA\nCMRMTSPLx\nRETAILx\nINDPRO\nIPFPNSS\nIPFINAL\nIPCONGD\n...\nDNDGRG3M086SBEA\nDSERRG3M086SBEA\nCES0600000008\nCES2000000008\nCES3000000008\nUMCSENTx\nDTCOLNVHFNM\nDTCTHFNM\nINVEST\nVIXCLSx\n\n\n\n\n0\n1959-01-01\n2583.560\n2426.0\n15.188\n2.766768e+05\n18235.77392\n21.9665\n23.3891\n22.2688\n31.7011\n...\n18.294\n10.152\n2.13\n2.45\n2.04\nNaN\n6476.00\n12298.00\n84.2043\nNaN\n\n\n1\n1959-02-01\n2593.596\n2434.8\n15.346\n2.787140e+05\n18369.56308\n22.3966\n23.7048\n22.4617\n31.9337\n...\n18.302\n10.167\n2.14\n2.46\n2.05\nNaN\n6476.00\n12298.00\n83.5280\nNaN\n\n\n2\n1959-03-01\n2610.396\n2452.7\n15.491\n2.777753e+05\n18523.05762\n22.7193\n23.8483\n22.5719\n31.9337\n...\n18.289\n10.185\n2.15\n2.45\n2.07\nNaN\n6508.00\n12349.00\n81.6405\nNaN\n\n\n3\n1959-04-01\n2627.446\n2470.0\n15.435\n2.833627e+05\n18534.46600\n23.2032\n24.1927\n22.9026\n32.4374\n...\n18.300\n10.221\n2.16\n2.47\n2.08\nNaN\n6620.00\n12484.00\n81.8099\nNaN\n\n\n4\n1959-05-01\n2642.720\n2486.4\n15.622\n2.853072e+05\n18679.66354\n23.5528\n24.3936\n23.1231\n32.5925\n...\n18.280\n10.238\n2.17\n2.48\n2.08\n95.3\n6753.00\n12646.00\n80.7315\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n776\n2023-09-01\n19111.748\n15741.9\n116.594\n1.507530e+06\n705304.00000\n103.2096\n101.0935\n101.3665\n102.1034\n...\n120.395\n123.976\n29.90\n34.55\n26.62\n67.9\n508808.61\n913938.95\n5074.6108\n15.0424\n\n\n777\n2023-10-01\n19145.402\n15784.6\n116.663\n1.505477e+06\n703528.00000\n102.3722\n100.5292\n100.5527\n101.1664\n...\n120.040\n124.228\n29.97\n34.67\n26.65\n63.8\n513229.64\n918210.64\n5015.5456\n19.0462\n\n\n778\n2023-11-01\n19213.108\n15859.9\n117.127\n1.514733e+06\n703336.00000\n102.6710\n100.9362\n101.2159\n101.8557\n...\n119.325\n124.551\n30.26\n34.96\n26.89\n61.3\n517434.30\n922552.40\n4999.7208\n13.8563\n\n\n779\n2023-12-01\n19251.946\n15899.0\n117.773\n1.530296e+06\n706180.00000\n102.6715\n100.8332\n101.2843\n101.9884\n...\n119.193\n124.917\n30.45\n35.01\n27.14\n69.7\n522366.13\n928336.14\n5077.4222\n12.6960\n\n\n780\n2024-01-01\n19377.558\n15948.8\n117.639\nNaN\n700291.00000\n102.5739\n100.9984\n101.7258\n102.6235\n...\n118.745\n125.662\n30.56\n35.21\n27.22\nNaN\nNaN\nNaN\n5105.3504\n13.3453\n\n\n\n\n781 rows × 128 columns\n\n\n\n\n\n# Extract transformation codes\ntransformation_codes = df.iloc[0, 1:].to_frame().reset_index()\ntransformation_codes.columns = ['Series', 'Transformation_Code']\n\nThe transformation codes map variables to the transformations we must apply to each variable to render them (approximately) stationary. The data frame transformation_codes has the variable’s name (Series) and its transformation (Transformation_Code). There are six possible transformations (\\(x_t\\) denotes the variable to which the transformation is to be applied):\n\ntransformation_code=1: no trasformation\ntransformation_code=2: \\(\\Delta x_t\\)\ntransformation_code=3: \\(\\Delta^2 x_t\\)\ntransformation_code=4: \\(log(x_t)\\)\ntransformation_code=5: \\(\\Delta log(x_t)\\)\ntransformation_code=6: \\(\\Delta^2 log(x_t)\\)\ntransformation_code=7: \\(\\Delta (x_t/x_{t-1} - 1)\\)\n\nWe can apply these transformations using the following code:\n\nimport numpy as np\n\n# Function to apply transformations based on the transformation code\ndef apply_transformation(series, code):\n    if code == 1:\n        # No transformation\n        return series\n    elif code == 2:\n        # First difference\n        return series.diff()\n    elif code == 3:\n        # Second difference\n        return series.diff().diff()\n    elif code == 4:\n        # Log\n        return np.log(series)\n    elif code == 5:\n        # First difference of log\n        return np.log(series).diff()\n    elif code == 6:\n        # Second difference of log\n        return np.log(series).diff().diff()\n    elif code == 7:\n        # Delta (x_t/x_{t-1} - 1)\n        return series.pct_change()\n    else:\n        raise ValueError(\"Invalid transformation code\")\n\n# Applying the transformations to each column in df_cleaned based on transformation_codes\nfor series_name, code in transformation_codes.values:\n    df_cleaned[series_name] = apply_transformation(df_cleaned[series_name].astype(float), float(code))\n\n\n1df_cleaned = df_cleaned[2:]\n2df_cleaned.reset_index(drop=True, inplace=True)\ndf_cleaned.head()\n\n\n1\n\nSince some transformations induce missing values, we drop the first two observations of the dataset\n\n2\n\nWe reset the index so that the first observation of the dataset has index 0\n\n\n\n\n\n\n\n\n\n\n\n\nsasdate\nRPI\nW875RX1\nDPCERA3M086SBEA\nCMRMTSPLx\nRETAILx\nINDPRO\nIPFPNSS\nIPFINAL\nIPCONGD\n...\nDNDGRG3M086SBEA\nDSERRG3M086SBEA\nCES0600000008\nCES2000000008\nCES3000000008\nUMCSENTx\nDTCOLNVHFNM\nDTCTHFNM\nINVEST\nVIXCLSx\n\n\n\n\n0\n1959-03-01\n0.006457\n0.007325\n0.009404\n-0.003374\n0.008321\n0.014306\n0.006035\n0.004894\n0.000000\n...\n-0.001148\n0.000292\n-0.000022\n-0.008147\n0.004819\nNaN\n0.004929\n0.004138\n-0.014792\nNaN\n\n\n1\n1959-04-01\n0.006510\n0.007029\n-0.003622\n0.019915\n0.000616\n0.021075\n0.014338\n0.014545\n0.015650\n...\n0.001312\n0.001760\n-0.000022\n0.012203\n-0.004890\nNaN\n0.012134\n0.006734\n0.024929\nNaN\n\n\n2\n1959-05-01\n0.005796\n0.006618\n0.012043\n0.006839\n0.007803\n0.014955\n0.008270\n0.009582\n0.004770\n...\n-0.001695\n-0.001867\n-0.000021\n-0.004090\n-0.004819\nNaN\n0.002828\n0.002020\n-0.015342\nNaN\n\n\n3\n1959-06-01\n0.003068\n0.003012\n0.003642\n-0.000097\n0.009064\n0.001141\n0.007034\n0.007128\n-0.004767\n...\n0.003334\n0.001946\n-0.004619\n0.003992\n0.004796\nNaN\n0.009726\n0.009007\n-0.012252\nNaN\n\n\n4\n1959-07-01\n-0.000580\n-0.000762\n-0.003386\n0.012155\n-0.000330\n-0.024240\n0.001168\n0.008249\n0.013054\n...\n-0.001204\n-0.000013\n0.000000\n-0.004040\n-0.004796\nNaN\n-0.004631\n-0.001000\n0.029341\nNaN\n\n\n\n\n5 rows × 128 columns\n\n\n\n\n\n1import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\n2series_to_plot = ['INDPRO', 'CPIAUCSL', 'TB3MS']\nseries_names = ['Industrial Production',\n                'Inflation (CPI)',\n                '3-month Treasury Bill rate']\n\n\n# Create a figure and a grid of subplots\n3fig, axs = plt.subplots(len(series_to_plot), 1, figsize=(8, 15))\n\n# Iterate over the selected series and plot each one\nfor ax, series_name, plot_title in zip(axs, series_to_plot, series_names):\n4    if series_name in df_cleaned.columns:\n5        dates = pd.to_datetime(df_cleaned['sasdate'], format='%m/%d/%Y')\n6        ax.plot(dates, df_cleaned[series_name], label=plot_title)\n7        ax.xaxis.set_major_locator(mdates.YearLocator(base=5))\n        ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n8        ax.set_title(plot_title)\n9        ax.set_xlabel('Year')\n        ax.set_ylabel('Transformed Value')\n10        ax.legend(loc='upper left')\n11        plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha='right')\n    else:\n        ax.set_visible(False)  # Hide plots for which the data is not available\n\n12plt.tight_layout()\n13plt.show()\n\n\n1\n\nWe use library matplotlib to plot\n\n2\n\nWe consider three series (INDPRO, CPIAUCSL, TB3MS) and assign them human-readable names (“Industrial Production”, “Inflation (CPI)”, “3-month Treasury Bill rate.”).\n\n3\n\nWe create a figure with three (len(series_to_plot)) subplots arranged vertically. The figure size is 8x15 inches.\n\n4\n\nWe check if the series exists in each series df_cleaned DataFrame columns.\n\n5\n\nWe convert the sasdate column to datetime format (not necessary, since sasdate was converter earlier)\n\n6\n\nWe plot each series against the sasdate on the corresponding subplot, labeling the plot with its human-readable name.\n\n7\n\nWe format the x-axis to display ticks and label the x-axis with dates taken every five years.\n\n8\n\nEach subplot is titled with the name of the economic indicator.\n\n9\n\nWe label the x-axis “Year,” and the y-axis “Transformed Value,” to indicate that the data was transformed before plotting.\n\n10\n\nA legend is added to the upper left of each subplot for clarity.\n\n11\n\nWe rotate the x-axis labels by 45 degrees to prevent overlap and improve legibility.\n\n12\n\nplt.tight_layout() automatically adjusts subplot parameters to give specified padding and avoid overlap.\n\n13\n\nplt.show() displays the figure with its subplots."
  },
  {
    "objectID": "comptools_ass1.html#forecasting-in-time-series",
    "href": "comptools_ass1.html#forecasting-in-time-series",
    "title": "Computational Tools for Macroeconometrics",
    "section": "Forecasting in Time Series",
    "text": "Forecasting in Time Series\nForecasting in time series analysis involves using historical data to predict future values. The objective is to model the conditional expectation of a time series based on past observations.\n\nDirect Forecasts\nDirect forecasting involves modeling the target variable directly at the desired forecast horizon. Unlike iterative approaches, which forecast one step ahead and then use those forecasts as inputs for subsequent steps, direct forecasting directly models the relationship between past observations and future value.\n\n\nARX Models\nAutoregressive Moving with predictors (ARX) models are a class of univariate time series models that extend ARMA models by incorporating exogenous (independent) variables. These models are formulated as follows:\n\\[\n\\begin{aligned}\nY_{t+h} &=  \\alpha + \\phi_0 Y_t + \\phi_1 Y_{t-1} + \\dots + \\phi_p Y_{t-p} + \\theta_{0,1} X_{t,1} + \\theta_{1,1} X_{t-1,1} + \\dots + \\theta_{p,1} X_{t-p,1} + \\dots + \\theta_{0,k} X_{t,k} + \\dots + \\theta_{p,k} X_{t-p,k} + u_{t+h}\\\\\n        &=  \\alpha + \\sum_{i=0}^p \\phi_i Y_{t-i} + \\sum_{j=1}^k\\sum_{s=0}^p \\theta_{s,j} X_{t-s,j} + \\epsilon_{t+h}\n\\end{aligned}\n\\tag{1}\\]\n\n\\(Y_{t+h}\\): The target variable at time \\(t+h\\).\n\\(X_{t,j}\\): Predictors (variable \\(j=1,\\ldots,k\\) at time \\(t\\)).\n\\(p\\) number of lags of the target and the predictors.1\n\\(\\phi_i\\), \\(i=0,\\dots,p\\), and \\(\\theta_{j,s}\\), \\(j=1,\\dots,k\\), \\(s=1,\\ldots,r\\): Parameters of the model.\n\\(\\epsilon_{t+h}\\): error term.\n\nFor instance, to predict Industrial Prediction using as predictor inflation and the 3-month t-bill, the target variable is INDPRO, and the predictors are CPIAUSL and TB3MS. Notice that the target and the predictors are the transformed variables. Thus, if we use INDPRO as the target, we are predicting the log-difference of industrial production, which is a good approximation for its month-to-month percentage change.\nBy convention, the data ranges from \\(t=1,\\ldots,T\\), where \\(T\\) is the last period, we have data (for the df_cleaned dataset, \\(T\\) corresponds to January 2024).\n\n\nForecasting with ARX\nSuppose that we know the parameters of the model for the moment. To obtain a forecast for \\(Y_{T+h}\\), the \\(h\\)-step ahead forecast, we calculate \\[\n\\begin{aligned}\n\\hat{Y}_{T+h} &=  \\alpha + \\phi_0 Y_T + \\phi_1 Y_{T-1} + \\dots + \\phi_p Y_{T-p} \\\\\n                  &\\,\\,\\quad \\quad + \\theta_{0,1} X_{T,1} + \\theta_{1,1} X_{T-1,1} + \\dots + \\theta_{p,1} X_{T-p,1} \\\\\n                  &\\,\\,\\quad \\quad + \\dots + \\theta_{0,k} X_{T,k} + \\dots + \\theta_{p,k} X_{T-p,k}\\\\\n        &=  \\alpha + \\sum_{i=0}^p \\phi_i Y_{T-i} + \\sum_{j=1}^k\\sum_{s=0}^p \\theta_{s,j} X_{T-s,j}\n\\end{aligned}\n\\]\nWhile this is conceptually easy, implementing the steps needed to calculate the forecast is insidious, and care must be taken to ensure we are calculating the correct forecast.\nTo start, it is convenient to rewrite the model in Equation 1 as a linear model \\[\n\\mathbf{y} = \\mathbf{X}\\boldsymbol{\\beta} + \\mathbf{u},\n\\] where \\(\\boldsymbol{\\beta}\\) is the vector (of size \\(1+(1+p)(1+k)\\)) \\[\n\\boldsymbol{\\beta}=\\begin{pmatrix}\\alpha\\\\\n\\phi_{0}\\\\\n\\vdots\\\\\n\\phi_{p}\\\\\n\\theta_{0,1}\\\\\n\\vdots\\\\\n\\theta_{p,1}\\\\\n\\vdots\\\\\n\\theta_{1,k}\\\\\n\\vdots\\\\\n\\theta_{p,k}\n\\end{pmatrix},\n\\] \\(\\mathbf{y}\\) and \\(\\mathbf{X}\\) are respectively given by \\[\n\\mathbf{y} = \\begin{pmatrix}\ny_{p+h+1}  \\\\\ny_{p+h+2}\\\\\n\\vdots \\\\\ny_{T}\n\\end{pmatrix}\n\\] and \\[\n\\mathbf{X} = \\begin{pmatrix}1 & Y_{p+1} & Y_{p} & \\cdots & Y_{1} & X_{p+1,1} & X_{p,1} & \\cdots & X_{1,1} & X_{p+1,k} & X_{p,k} & \\cdots & X_{1,k}\\\\\n\\vdots & \\vdots & \\vdots &  & \\vdots & \\vdots & \\vdots &  & \\vdots & \\vdots & \\vdots &  & \\vdots\\\\\n1 & Y_{T-h-1} & Y_{T-h-2} & \\cdots & Y_{T-h-p-1} & X_{T-h-1,1} & X_{T-h-2,1} & \\cdots & X_{T-h-p-1,1} & X_{T-h-1,k} & X_{T-h-2,k} & \\cdots & X_{T-h-p-1,k}\\\\\n1 & Y_{T-h} & Y_{T-h-1} & \\cdots & Y_{T-h-p} & X_{T-h,1} & X_{T-h-1,1} & \\cdots & X_{T-h-p,1} & X_{T-h,k} & X_{T-h-1,k} &  & X_{T-h-p,k}\n\\end{pmatrix}.\n\\] The size of \\(\\mathbf{X}\\) is \\((T-p-h)\\times 1+(1+k)(1+p)\\) and that of \\(\\mathbf{y}\\) is \\(T-h-p\\).\nThe matrix \\(\\mathbf{X}\\) can be obtained in the following way:\n\nYraw = df_cleaned['INDPRO']\nXraw = df_cleaned[['CPIAUCSL', 'TB3MS']]\n\nnum_lags  = 4  ## this is p\nnum_leads = 1  ## this is h\nX = pd.DataFrame()\n## Add the lagged values of Y\ncol = 'INDPRO'\nfor lag in range(0,num_lags+1):\n        # Shift each column in the DataFrame and name it with a lag suffix\n        X[f'{col}_lag{lag}'] = Yraw.shift(lag)\n\nfor col in Xraw.columns:\n    for lag in range(0,num_lags+1):\n        # Shift each column in the DataFrame and name it with a lag suffix\n        X[f'{col}_lag{lag}'] = Xraw[col].shift(lag)\n## Add a column on ones (for the intercept)\nX.insert(0, 'Ones', np.ones(len(X)))\n\n\n## X is now a DataFrame\nX.head()\n\n\n\n\n\n\n\n\n\nOnes\nINDPRO_lag0\nINDPRO_lag1\nINDPRO_lag2\nINDPRO_lag3\nINDPRO_lag4\nCPIAUCSL_lag0\nCPIAUCSL_lag1\nCPIAUCSL_lag2\nCPIAUCSL_lag3\nCPIAUCSL_lag4\nTB3MS_lag0\nTB3MS_lag1\nTB3MS_lag2\nTB3MS_lag3\nTB3MS_lag4\n\n\n\n\n0\n1.0\n0.014306\nNaN\nNaN\nNaN\nNaN\n-0.000690\nNaN\nNaN\nNaN\nNaN\n0.10\nNaN\nNaN\nNaN\nNaN\n\n\n1\n1.0\n0.021075\n0.014306\nNaN\nNaN\nNaN\n0.001380\n-0.000690\nNaN\nNaN\nNaN\n0.15\n0.10\nNaN\nNaN\nNaN\n\n\n2\n1.0\n0.014955\n0.021075\n0.014306\nNaN\nNaN\n0.001723\n0.001380\n-0.000690\nNaN\nNaN\n-0.11\n0.15\n0.10\nNaN\nNaN\n\n\n3\n1.0\n0.001141\n0.014955\n0.021075\n0.014306\nNaN\n0.000339\n0.001723\n0.001380\n-0.00069\nNaN\n0.37\n-0.11\n0.15\n0.10\nNaN\n\n\n4\n1.0\n-0.024240\n0.001141\n0.014955\n0.021075\n0.014306\n-0.001034\n0.000339\n0.001723\n0.00138\n-0.00069\n-0.01\n0.37\n-0.11\n0.15\n0.1\n\n\n\n\n\n\n\n\nNote that the first \\(p=\\)4 rows of X have missing values.\nThe vector \\(\\mathbf{y}\\) can be similarly created as\n\ny = Yraw.shift(-num_leads)\ny\n\n0      0.021075\n1      0.014955\n2      0.001141\n3     -0.024240\n4     -0.034465\n         ...   \n774   -0.008147\n775    0.002915\n776    0.000005\n777   -0.000951\n778         NaN\nName: INDPRO, Length: 779, dtype: float64\n\n\nThe variable y has missing values in the last h positions (it is not possible to lead the target beyond \\(T\\)).\nNotice also that we must keep the last row of X for constructing the forecast.\nNow we create two numpy arrays with the missing values stripped:\n\n## Save last row of X (converted to numpy)\nX_T = X.iloc[-1:].values\n## Subset getting only rows of X and y from p+1 to h-1\n## and convert to numpy array\ny = y.iloc[num_lags:-num_leads].values\nX = X.iloc[num_lags:-num_leads].values\n\n\nX_T\n\narray([[ 1.00000000e+00, -9.51056709e-04,  4.86991246e-06,\n         2.91450984e-03, -8.14668061e-03,  9.25729878e-04,\n         7.21400503e-04,  7.26467817e-04,  8.11330254e-04,\n        -2.79891559e-03, -1.51527417e-03, -2.00000000e-02,\n        -3.00000000e-02, -7.00000000e-02,  2.00000000e-02,\n         2.00000000e-02]])\n\n\nNow, we have to estimate the parameters and obtain the forecast.\n\n\nEstimation\nThe parameters of the model can be estimated by OLS (the OLS estimates the coefficient of the linear projection of \\(Y_{t+h}\\) on its lags and the lags of \\(X_t\\)).\nThe OLS estimator of \\(\\boldsymbol{\\beta}\\) is \\[\n\\hat{\\boldsymbol{\\beta}} = (X'X)^{-1}X'Y.\n\\]\nWhile this is the formula used to describe the OLS estimator, from a computational poijnt of view is much better to define the estimator as the solution of the set of linear equations: \\[\n(X'X)\\boldsymbol{\\beta} = X'Y\n\\]\nThe function solve can be used to solve this linear system of equation.\n\nfrom numpy.linalg import solve\n# Solving for the OLS estimator beta: (X'X)^{-1} X'Y\nbeta_ols = solve(X.T @ X, X.T @ y)\n\n## Produce the One step ahead forecast\n## % change month-to-month INDPRO\nforecast = X_T@beta_ols*100\nforecast\n\narray([0.08445815])\n\n\nThe variable forecast contains now the one-step ahead (\\(h=1\\) forecast) of INDPRO. Since INDPRO has been transformed in logarithmic differences, we are forecasting the percentage change (and multiplying by 100 gives the forecast in percentage points).\nTo obtain the \\(h\\)-step ahead forecast, we must repeat all the above steps using a different h.\n\n\nForecasting Exercise\nHow good is the forecast that the model is producing? One thing we could do to assess the forecast’s quality is to wait for the new data on industrial production and see how big the forecasting error is. However, this evaluation would not be appropriate because we need to evaluate the forecast as if it were repeatedly used to forecast future values of the target variables. To properly assess the model and its ability to forecast INDPRO, we must keep producing forecasts and calculating the errors as new data arrive. This procedure would take time as we must wait for many months to have a series of errors that is large enough.\nA different approach is to do what is called a Real-time evaluation. A Real-time evaluation procedure consists of putting ourselves in the shoes of a forecaster who has been using the forecasting model for a long time.\nIn practice, that is what are the steps to follow to do a Real-time evaluation of the model:\n\nSet \\(T\\) such that the last observation of df coincides with December 1999;\nEstimate the model using the data up to \\(T\\)\nProduce \\(\\hat{Y}_{T+1}, \\hat{Y}_{T+2}, \\dots, \\hat{Y}_{T+H}\\)\nSince we have the actual data for January, February, …, we can calculate the forecasting errors of our model \\[\n\\hat{e}_{T+h} = \\hat{Y}_{T+h} - Y_{T+h}, \\,\\, h = 1,\\ldots, H.\n\\]\nSet \\(T = T+1\\) and do all the steps above.\n\nThe process results are a series of forecasting errors we can evaluate using several metrics. The most commonly used is the MSFE, which is defined as \\[\nMSFE_h = \\frac{1}{J}\\sum_{j=1}^J  \\hat{e}_{T+j+h}^2,\n\\] where \\(J\\) is the number of errors we collected through our real-time evaluation.\nThis assignment asks you to perform a real-time evaluation assessment of our simple forecasting model and calculate the MSFE for steps \\(h=1,4,8\\).\nAs a bonus, we can evaluate different models and see how they perform differently. For instance, you might consider different numbers of lags and/or different variables in the model.\n\nHint\nA sensible way to structure the code for real-time evaluation is to use several functions. For instance, you can define a function that calculates the forecast given the DataFrame.\n\ndef calculate_forecast(df_cleaned, p = 4, H = [1,4,8], end_date = '12/1/1999',target = 'INDPRO', xvars = ['CPIAUCSL', 'TB3MS']):\n\n    ## Subset df_cleaned to use only data up to end_date\n    rt_df = df_cleaned[df_cleaned['sasdate'] &lt;= pd.Timestamp(end_date)]\n    ## Get the actual values of target at different steps ahead\n    Y_actual = []\n    for h in H:\n        os = pd.Timestamp(end_date) + pd.DateOffset(months=h)\n        Y_actual.append(df_cleaned[df_cleaned['sasdate'] == os][target]*100)\n        ## Now Y contains the true values at T+H (multiplying * 100)\n\n    Yraw = rt_df[target]\n    Xraw = rt_df[xvars]\n\n    X = pd.DataFrame()\n    ## Add the lagged values of Y\n    for lag in range(0,p):\n        # Shift each column in the DataFrame and name it with a lag suffix\n        X[f'{target}_lag{lag}'] = Yraw.shift(lag)\n\n    for col in Xraw.columns:\n        for lag in range(0,p):\n            X[f'{col}_lag{lag}'] = Xraw[col].shift(lag)\n    \n    ## Add a column on ones (for the intercept)\n    X.insert(0, 'Ones', np.ones(len(X)))\n    \n    ## Save last row of X (converted to numpy)\n    X_T = X.iloc[-1:].values\n\n    ## While the X will be the same, Y needs to be leaded differently\n    Yhat = []\n    for h in H:\n        y_h = Yraw.shift(-h)\n        ## Subset getting only rows of X and y from p+1 to h-1\n        y = y_h.iloc[p:-h].values\n        X_ = X.iloc[p:-h].values\n        # Solving for the OLS estimator beta: (X'X)^{-1} X'Y\n        beta_ols = solve(X_.T @ X_, X_.T @ y)\n        ## Produce the One step ahead forecast\n        ## % change month-to-month INDPRO\n        Yhat.append(X_T@beta_ols*100)\n\n    ## Now calculate the forecasting error and return\n\n    return np.array(Y_actual) - np.array(Yhat)\n\nWith this function, you can calculate real-time errors by looping over the end_date to ensure you end the loop at the right time.\n\nt0 = pd.Timestamp('12/1/1999')\ne = []\nT = []\nfor j in range(0, 10):\n    t0 = t0 + pd.DateOffset(months=1)\n    print(f'Using data up to {t0}')\n    ehat = calculate_forecast(df_cleaned, p = 4, H = [1,4,8], end_date = t0)\n    e.append(ehat.flatten())\n    T.append(t0)\n\n## Create a pandas DataFrame from the list\nedf = pd.DataFrame(e)\n## Calculate the RMSFE, that is, the square root of the MSFE\nnp.sqrt(edf.apply(np.square).mean())\n\nUsing data up to 2000-01-01 00:00:00\nUsing data up to 2000-02-01 00:00:00\nUsing data up to 2000-03-01 00:00:00\nUsing data up to 2000-04-01 00:00:00\nUsing data up to 2000-05-01 00:00:00\nUsing data up to 2000-06-01 00:00:00\nUsing data up to 2000-07-01 00:00:00\nUsing data up to 2000-08-01 00:00:00\nUsing data up to 2000-09-01 00:00:00\nUsing data up to 2000-10-01 00:00:00\n\n\n0    0.337110\n1    0.512690\n2    0.624035\ndtype: float64\n\n\nYou may change the function calculate_forecast to output also the actual data end the forecast, so you can, for instance, construct a plot."
  },
  {
    "objectID": "comptools_ass1.html#working-with-github",
    "href": "comptools_ass1.html#working-with-github",
    "title": "Computational Tools for Macroeconometrics",
    "section": "Working with github",
    "text": "Working with github\nThe https://github.com/uniroma/comptools-assignments repository contains four files:\n\ncomptools_ass1.qmd\nassignment1_julia.jl\nassignment1_python.py\nassignment1_r.r\n\nThe comptools_ass1.qmd is this file (in quarto format). The repository also contains the pdf and the html version of this file.\nThe other files, assignment1_julia.jl, assignment1_julia.py, and assignment1_julia.py, are the starter kit of the code you have to write in Julia, R, and Python. You can use them to start your work.\n\nUsing Visual Studio Code\nUnless you are familiar with the command line and you are using Linux or MacOS, the best way to interact with github is through Visual Studio Code. Instructions on how to install Visual Studio Code on Windows are here. For MacOS the instructions are here.\nVisual Studio Code has an extension system. The extensions extend VSCode adding features that simplify writing and interacting with code.\nThe extensions you should install are\n\nJulia Extension Instructions\nPython Extension Instruction\nR Extension Instructions\n\nThere are many other extensions that you might find useful. For those, google is your friend.\n\n\nCloning the repository\nCloning a repository from GitHub into Visual Studio Code (VSCode) allows you to work on projects directly from your local machine. Here’s a detailed step-by-step guide on how to clone the repository https://github.com/uniroma/comptools-assignments into VSCode:\n\nOpen Visual Studio Code\n\n\nStart by opening Visual Studio Code on your computer.\n\n\nAccess the Command Palette\n\n\nWith VSCode open, access the Command Palette by pressing Ctrl+Shift+P on Windows/Linux or Cmd+Shift+P on macOS. This is where you can quickly access various commands in VSCode.\n\n\nClone Repository\n\n\nIn the Command Palette, type “Git: Clone” and select the option Git: Clone from the list that appears. This action will prompt VSCode to clone a repository.\n\n\nEnter the Repository URL\n\n\nA text box asking for the repository URL will appear at the top of the VSCode window. Enter https://github.com/uniroma/comptools-assignments and press Enter. (This is the URL of the assignment 1 repository).\n\n\nChoose a Directory\n\n\nNext, VSCode will ask you to select a directory where you want to clone the repository. Navigate through your file system and choose a directory that will be the local storage place for the repository. The directory should exist. Create it if it doesn’t. Once selected, the cloning process will start.\n\n\nOpen the Cloned Repository\n\n\nAfter the repository has been successfully cloned, a notification will pop up in the bottom right corner of VSCode with the option to Open Repository. Click on it. If you missed the notification, you can navigate to the directory where you cloned the repository and open it manually from within VSCode by going to File &gt; Open Folder.\n\n\nStart Working\n\n\nNow that the repository is cloned and opened in VSCode, you can start working on the project. You can edit files, commit changes, and manage branches directly from VSCode.\n\n\n\n\n\n\n\nTip\n\n\n\n\nEnsure you have Git installed on your computer to use the Git features in VSCode. If you do not have Git installed, you can download it from the official Git website. Instructions to install Git.\nIf you are working with GitHub repositories frequently, consider authenticating with GitHub in VSCode to streamline your workflow. This can be done through the Command Palette by finding the GitHub: Sign in command.\n\n\n\n\n\nMake changes and commit them to the repository\n\nMake Your Changes\n\nOpen the repository you have cloned in VSCode.\nNavigate to the file(s) you wish to change within the VSCode Explorer pane.\nMake the necessary modifications or additions to the file(s). These changes can be anything from fixing a bug to adding new features.\n\nReview Your Changes\n\n\nAfter making changes, you can see which files have been modified by looking at the Source Control panel. You can access this panel by clicking on the Source Control icon (it looks like a branch or a fork) on the sidebar or by pressing Ctrl+Shift+G (Windows/Linux) or Cmd+Shift+G (macOS) and searching for Show control panel.\nModified files are listed within the Source Control panel. Click on a file to view the changes (differences) between your working version and the last commit. Lines added are highlighted in green, and lines removed are highlighted in red.\n\n\nStage Your Changes\n\n\nBefore committing, you need to stage your changes. Staging is like preparing and reviewing exactly what changes you will commit to without making the commit final.\nYou can stage changes by right-clicking on a modified file in the Source Control panel and selecting Stage Changes. Alternatively, you can stage all changes at once by clicking the + icon next to the “Changes” header.\n\n\nCommit Your Changes\n\n\nAfter staging your changes, commit them to the repository. To do this, type a commit message in the message box at the top of the Source Control panel. This message should briefly describe the changes you’ve made.\nPress Ctrl+Enter (Windows/Linux) or Cmd+Enter (macOS) to commit the staged changes (search for Git: Commit). Alternatively, you can click the checkmark icon (Commit) at the top of the Source Control panel.\nBefore committing, you should enter a commit message that briefly describes the changes that you have made. Commit messages are essential for making the project’s history understandable for yourself and the other collaborators.\n\n\nPush Your Changes\n\n\nIf you’re working with a remote repository (like one hosted on GitHub), you must push your commits to update the remote repository with your local changes.\nYou can push changes by clicking on the three dots (...) menu in the Source Control panel, navigating to Push and selecting it. If you’re using Git in VSCode for the first time, you might be prompted to enter your GitHub credentials or authenticate in another way.\n\n\n\n\n\n\n\nTip\n\n\n\nIt’s a good practice to pull changes from the remote repository before starting your work session (to ensure you’re working with the latest version) and before pushing your changes (to ensure no conflicts). You can pull changes by clicking on the three dots (...) menu in the Source Control panel and selecting Pull.\n\n\nThe following video explores in more detail how to use git in VSCode."
  },
  {
    "objectID": "comptools_ass1.html#footnotes",
    "href": "comptools_ass1.html#footnotes",
    "title": "Computational Tools for Macroeconometrics",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTheoretically, the number of lags for the target variables and the predictors could be different. Here, we consider the simpler case in which both are equal.↩︎"
  },
  {
    "objectID": "comptools_ass2.html",
    "href": "comptools_ass2.html",
    "title": "Optimization",
    "section": "",
    "text": "Invitation link to accept the assignment"
  },
  {
    "objectID": "comptools_ass2.html#assignment-link-on-github",
    "href": "comptools_ass2.html#assignment-link-on-github",
    "title": "Optimization",
    "section": "",
    "text": "Invitation link to accept the assignment"
  },
  {
    "objectID": "comptools_ass2.html#optimization-problems",
    "href": "comptools_ass2.html#optimization-problems",
    "title": "Optimization",
    "section": "Optimization problems",
    "text": "Optimization problems\nOptimization is a field of mathematics that focuses on the problem of finding the solution to a minimization problem. More precisely, given a function \\(f:\\mathbb{R}^{k}\\to \\mathbb{R}\\), we seek \\(x^{*}\\in\\mathcal{C}\\subset \\mathbb{R}^{k}\\) such that \\[\nf(x^{*}) \\leqslant f(x) \\text{ for all }x\\in\\mathcal{C}.\n\\] The set \\(\\mathcal{C}\\) constraints the solution to leave in a subset of \\(\\mathbb{R}^{k}\\)\nWhen \\(\\mathcal{C}\\) coincides with \\(\\mathbb{R}^k\\) the problem is said to be unconstrained.\nIn unconstrained optimization, the objective function \\(f(x)\\) needs to be minimized (or maximized) without any restrictions on the variable \\(x\\). The problem is described as \\[\n\\min_{x} f(x), \\quad x\\in\\mathbb{R}^k.\n\\]\nMany problems involve constraints that the solution must satisfy, that is, \\(\\mathcal{C}\\) does not coincide with \\(\\mathbb{R}^k\\). For instance, we want to minimize the function over a space where \\(x_j &lt; c_j\\), \\(c_j\\in\\mathbb{R}\\), \\(j=1,\\ldots,k\\) or we may be interested in values of \\(x\\) that minimizes \\(f\\) when certain restrictions are satisfied. Generally, the constrained optimization is \\[\n   \\begin{aligned}\n   &\\min_{x} \\ f(x) \\\\\n   &\\text{subject to} \\\\\n   & \\ g_i(x) \\leq 0, \\quad i = 1, \\ldots, m, \\\\\n                     & \\ h_j(x) = 0, \\quad j = 1, \\ldots, p.\n   \\end{aligned}\n\\] Here, \\(g_i(x)\\) and \\(h_j(x)\\) are functions that represent inequality and equality constraints.\nIn what follows, we will focus on the class of unconstrained problems where \\(f\\) is smooth, that is, a function that everywhere continuously differentiable."
  },
  {
    "objectID": "comptools_ass2.html#unconstrained-problems",
    "href": "comptools_ass2.html#unconstrained-problems",
    "title": "Optimization",
    "section": "Unconstrained problems",
    "text": "Unconstrained problems\n\\[\n\\min_{x} f(x), \\quad x\\in\\mathbb{R}^k.\n\\tag{1}\\]\nA point \\(x^*\\) is a global minimizer of \\(f\\) if \\(f(x^*)\\leqslant f(x)\\) for all \\(x\\) ranging over of of \\(\\mathbb{R}^k\\).\nThe global minimizer can be difficult to find. The algorithms to solve Equation 1 exploit local knowledge of \\(f\\), we do not have a clear picture of the overall shape of \\(f\\) and, as such, we cannot ever be sure that the solution we find is indeed a global solution to the minimization problem. Most algorithms are able to find only a local minimizer, which is a point that achieves the samllest value of \\(f\\) in a neighborhood.\nA point \\(x^*\\) is a local minimizer if there is a neighborhood1 \\(\\mathcal{N}\\) of \\(x^*\\) such that \\(f(x^*)\\leqslant f(x)\\) for all \\(x\\in\\mathcal{N}\\).\nA point \\(x^*\\) is a strict local minimizer if there a neighborhood of \\(\\mathcal{N}\\) such that \\(f(x^*) &lt; f(x)\\) for all \\(x\\in \\mathcal{N}\\).\nFor instance, for the function \\(f(x) = 2024\\), every point is a weak local minimizer, while the function \\(f(x) = (x-a)^2\\) has a strict local minimizer at \\(x=a^{-1}\\).\nNotation: Given a function \\(f:\\mathbb{R}^k\\to\\mathbb{R}\\), the gradient of \\(f\\) evaluated at \\(x^o\\) is: \\[\n\\nabla f(x^o) := \\begin{pmatrix}\\left.\\frac{\\partial f(x)}{\\partial x_{1}}\\right|_{x=x^{o}}\\\\\n\\left.\\frac{\\partial f(x)}{\\partial x_{2}}\\right|_{x=x^{o}}\\\\\n\\vdots\\\\\n\\left.\\frac{\\partial f(x)}{\\partial x_{k}}\\right|_{x=x^{o}}\n\\end{pmatrix}.\n\\] Similarly, the \\(k\\times k\\) hessian matrix of \\(f\\) evaluated at \\(x^o\\) is \\[\n\\nabla^{2}f(x^{o})=\\begin{pmatrix}\\left.\\frac{\\partial^{2}f(x)}{\\partial x_{1}\\partial x_{1}}\\right|_{x=x^{o}} & \\left.\\frac{\\partial^{2}f(x)}{\\partial x_{1}\\partial x_{2}}\\right|_{x=x^{o}} & \\cdots & \\left.\\frac{\\partial^{2}f(x)}{\\partial x_{1}\\partial x_{k}}\\right|_{x=x^{o}}\\\\\n\\left.\\frac{\\partial^{2}f(x)}{\\partial x_{2}\\partial x_{1}}\\right|_{x=x^{o}} & \\left.\\frac{\\partial^{2}f(x)}{\\partial x_{2}\\partial x_{2}}\\right|_{x=x^{o}} & \\cdots & \\left.\\frac{\\partial^{2}f(x)}{\\partial x_{2}\\partial x_{k}}\\right|_{x=x^{o}}\\\\\n\\vdots & \\vdots &  & \\vdots\\\\\n\\left.\\frac{\\partial^{2}f(x)}{\\partial x_{k}\\partial x_{1}}\\right|_{x=x^{o}} & \\left.\\frac{\\partial^{2}f(x)}{\\partial x_{k}\\partial x_{2}}\\right|_{x=x^{o}} & \\cdots & \\left.\\frac{\\partial^{2}f(x)}{\\partial x_{k}\\partial x_{k}}\\right|_{x=x^{o}}\n\\end{pmatrix}.\n\\]"
  },
  {
    "objectID": "comptools_ass2.html#fundamental-mathematical-tools",
    "href": "comptools_ass2.html#fundamental-mathematical-tools",
    "title": "Optimization",
    "section": "Fundamental mathematical tools",
    "text": "Fundamental mathematical tools\nThe fundamental mathematical tool used to study minimizers of smooth functions is Taylor’s theorem.\n\nTheorem 1 Suppose that \\(f:\\mathbb{R}^k\\to\\mathbb{R}\\) is continuously differentiable and that \\(p\\io\\mathbb{R}^k\\). Then we have that \\[\nf(x+p) = f(x) + \\nabla f(x+tp)'p,\n\\] for some \\(t\\in(0,1)\\). Moreover, if \\(f\\) is twice continuously differentiable, we have that \\[\n\\nabla f(x+tp) = \\nabla f(x) + \\int_{0}^{1} \\nabla^2 f(x+tp)p\\,dt,\n\\] and that \\[\nf(x+p) = f(x)+\\nabla f(x)'p + \\frac{1}{2}p'\\nabla^2 f(x+tp)p.\n\\]\n\nThe necessary conditions for optimality are derived assuming that \\(x^*\\) is a local minimizer and the proving facts about \\(\\nabla f(x^*)\\) and \\(\\nabla^2 f(x^*)\\).\n\nTheorem 2 If \\(x^*\\) is a local optimizer and \\(f\\) is continuously differentiable in an open neighborhood of \\(x^*\\), then \\(\\nabla f(x^*)=0\\) (first-order necessary condition); if \\(\\nabla^2 f\\) exists and its continuous in an open neighborhood of \\(x^*\\), then \\(\\nabla^2 f(x^*)\\) is positive definite (second-order necessary conditions).2\n\nSufficient conditions for optimality are conditions on the derivatives of \\(f\\) at the point \\(x^*\\) that guarantee that \\(x^*\\) is a local minimizer.\n\nTheorem 3 Suppose that \\(\\nabla^2 f(x^*)\\) is continuous in an open neighborhood of \\(x^*\\) and that \\(\\nabla f(x^*)=0\\) and \\(\\nabla^2 f(x^*)\\) is positive definite. Then \\(x^*\\) is a strict local minimizer of \\(f\\).\n\nThe second-order sufficient conditions guarantee something stronger than the necessary conditions; namely, that the minimizer is a strict local minimizer. Note too that the second-order sufficient conditions are not necessary: a point \\(x^∗\\) may be a strict local minimizer, and yet may fail to satisfy the sufficient conditions. A simple example is given by the function \\(f(x) = x^3\\), for which the point \\(x^∗=0\\) is a strict local minimizer at which the Hessian matrix vanishes (and is therefore not positive definite).\nWhen the objective function is convex, local and global minimizers are simple to characterize.\n\nTheorem 4 When \\(f\\) is convex, any local minimizer of \\(x^*\\) is a global minimizer of \\(f\\). If in addition, \\(f\\) is differentiable, any stationary point \\(x^*\\) is a global minimizer."
  },
  {
    "objectID": "comptools_ass2.html#overview-of-algorithms",
    "href": "comptools_ass2.html#overview-of-algorithms",
    "title": "Optimization",
    "section": "Overview of algorithms",
    "text": "Overview of algorithms\nA common approach to optimization is to incrementally improve a point \\(x\\) by taking a step that minimizes the objective value based on a local model. The local model may be obtained, for example, from a first- or second-order Taylor approximation. Optimization algorithms that follow this general approach are referred to as descent direction methods. They start with a design point \\(x^{(0)}\\) and then generate a sequence of points, sometimes called iterates, to converge to a local minimum.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the function and its derivative\ndef f(x):\n    return x**2 - np.log(x)\n\ndef df(x):\n    return 2*x - 1/x\n\ndef connectpoints(x,y,p1,p2):\n    x1, x2 = x[p1], x[p2]\n    y1, y2 = y[p1], y[p2]\n    plt.plot([x1,x2],[y1,y2],'k-')\n\n\n# Initial point\nx0 = 2\nalpha = 0.3\n\n# Gradient descent update\nx1 = x0 - alpha * df(x0)\nx2 = x1 - alpha * df(x1)\n# Points for the function plot\nx = np.linspace(-2.5, 2.5, 400)\ny = f(x)\n\n# Tangent line at x0 (y = m*x + b)\n\n# Creating the plot\n\nplt.figure(figsize=(8, 5))\nplt.plot(x, y, label='f(x) = x^2')\nplt.scatter([x0, x1], [f(x0), f(x1)], color='red')  # Points\nm = df(x0)\nb = f(x0) - m*x0\ntangent_line = m*x + b\nplt.plot(x, tangent_line, 'b--', label=f'Tangent at x0={x0}')\nplt.arrow(x0, 0.4, x1-x0, 0.0, head_width=0.1, length_includes_head=True, color = 'r')\n\nm = df(x1)\nb = f(x1) - m*x1\ntangent_line = m*x + b\nplt.plot(x, tangent_line, 'b--', label=f'Tangent at x0={x1}', )\nplt.ylim([-0.2,6])\nplt.xlim([-0.4,3])\nplt.plot(x, tangent_line, 'b--', label=f'Tangent at x0={x1}', )\nm = df(x0)\nb = f(x0) - m*x0\ntangent_line = m*x + b\n\nplt.scatter(x0, f(x0), color='green')  # Initial point\nplt.scatter(x1, f(x1), color='green')  # Next point after step\nplt.scatter(x2, f(x2), color='green')  # Next point after step\n\nplt.arrow(x1, 0., x2-x1, 0., head_width=0.1, length_includes_head=True, color = 'r')\n\nplt.title('Gradient Descent on f(x)')\nplt.xlabel('x')\nplt.ylabel('f(x)')\nplt.xticks([])  # Remove x-axis ticks\nplt.xticks([x0, x1, x2], [r\"$x^{(0)}$\", r\"$x^{(1)}$\", r\"$x^{(2)}$\"])\n#plt.legend()\nplt.grid(True)\nplt.plot([x0, x0],[f(x0), 0],'g--')\nplt.plot([x1, x1],[f(x1), 0],'g--')\nplt.plot([x2, x2],[f(x1), 0],'g--')\nplt.show()\n\n/var/folders/cc/94_qfp2s31zbxp0zcs5tn2wr0000gn/T/ipykernel_38321/189701708.py:6: RuntimeWarning: invalid value encountered in log\n  return x**2 - np.log(x)\n\n\n\n\n\n\n\n\nFigure 1: Gradient descent\n\n\n\n\n\nThe intuition behind this approach is relatively simple. Consider the function plotted in Figure 1. We start the algorithm at \\(x^{(0)}\\). The derivative at this point (the tangent line in blue) is positive, that is, \\(f'(x^{(0)})&gt;0\\). Thus, to descend toward smaller values of the function have to set a point \\(x^{(1)}\\) smaller. One possibility is to use the following iteration \\[\nx^{(1)} = x^{(0)} - \\alpha \\nabla f(x^{(0)}),\n\\] where \\(\\alpha\\in(0,1)\\) is the step size. As it can be seen from Figure 1, at this point the value of \\(f\\) is now lower. Applying a new iterate we obtain \\(x^{(2)} = x^{(1)} - \\alpha f'(x^{(1)})\\) which is now very close to the minimum value of the function.\nWe will keep iterating until the termination condition is satisfied. The termination condition will be satisfied when the current iterate is likely to be a local minimum.[^termination]\n3: The most common termination conditions are 1. Maximum iterations. We may want to terminate when the number of iterations \\(k\\) exceeds some threshold \\(k_max\\). Alternatively, we might want to terminate once a maximum amount of elapsed time is exceeded. 2. Absolute improvement. This termination condition looks at the change in the function value over subsequent steps. If the change is smaller than a given threshold, it will terminate: \\[\nf(x^{(k)}) - f(x^{(r+1)}) &lt; \\epsilon_a\n\\] 1. Relative improvement. This termination condition looks at the change in function value but uses the relative change of the function. The iterations will terminate if \\[\nf(x^{(k)}) - f(x^{(r+1)}) &lt; \\epsilon_r|f(x^{(k)})|\n\\] 1. Gradient magnitude. We can terminate if the derivative is smaller than a certain tolerance \\[\n\\Vert \\delta f(x^{(k)}) \\Vert &lt; \\epsilon_g\n\\]\nThe same logic can be applied to the case in which \\(f:\\mathbb{R}^k \\to \\mathbb{R}\\) the only difference is that now \\(\\nabla f(x^{(0)})\\) is a \\(k\\times 1\\) vector instead of being a scalar.\nThe gradient descent idea can be generalized by considering the following iterate \\[\nx^{(r)} = x^{(r-1)} - \\alpha d^{(r)},\n\\] where \\(d^{(r)}\\) is a descent direction. The idea of this generalization is that instead of using the gradient as direction, we can use different directions that might speed up the algorithm.\nWhen \\(d^{(r)} = \\nabla f(x^{(r)})\\), the algorithm is called the gradient descent (and direction is called the direction of deepest descent).\nDirections that can be used belong to two classes: 1. first-order: the direction only uses information about the gradient of \\(f\\). The many variations of the gradient descent (Ada, Momentum, etc.) and the conjugate gradient method belong to this class. 2. second order: the direction incorporate information about the second derivatives of \\(f\\). The key idea here is that \\[\nf(x^{(r+1)}) = f(x^{(r)}) + \\nabla f'(x^{(r)})(x^{(r+1)}-x^{(r)}) + (x^{(r+1)}-x^{(r)}) \\dot{H}_k (x^{(r+1)}-x^{(r)}),\n\\] where \\(\\dot{H}_k = \\nabla^2 f(\\dot{x}^{(r)})\\) is the Hessian evaluated at some point between \\(x^{(r+1)}\\) and \\(x^{(r)}\\). Then, approximating the gradient of \\(f\\) and setting it equal to zero yields \\[\nx^{(r+1)} = x^{(r)}-[\\nabla^2 f(x^{(r)})]^{-1} \\nabla f(x^{(r)}) +\n\\] which suggests using the inverse of the hessian to form the direction. Since evaluating the Hessian at each iterate is too costly computationally, different algorithms approximate the Hessian in different ways."
  },
  {
    "objectID": "comptools_ass2.html#a-simple-implementation-of-gradient-descent",
    "href": "comptools_ass2.html#a-simple-implementation-of-gradient-descent",
    "title": "Optimization",
    "section": "A simple implementation of gradient descent",
    "text": "A simple implementation of gradient descent\nThe following code implements a gradient descent with steepest direction in Python.\n\nfrom numpy import linalg as la\n\ndef steepest_descent(f, gradient, initial_guess, learning_rate, num_iterations = 100, epsilon_g = 1e-07):\n    x = initial_guess\n    for i in range(num_iterations):\n        grad = gradient(x)\n        x = x - learning_rate * grad\n        normg = la.norm(grad)\n        print(f\"Iteration {i+1}: x = {x}, f(x) = {f(x)}, ||g(x)||={normg}\")\n        ## Termination condition\n        if  normg &lt; epsilon_g:\n            break\n    return x\n\nThis is the Julia version.\nusing LinearAlgebra ## needed for norm\nfunction steepest_descent(f, gradient, initial_guess, learning_rate; num_iterations = 100; epsilon_g = 1e-7)\n    x = initial_guess\n    for i in 1:num_iterations\n        grad = gradient(x)\n        x = x - learning_rate * grad\n        normg = norm(g)\n        println(\"Iteration $i: x = $x, f(x) = $(objective_function(x)), ||g(x)||=$(normg)\")\n        if normg &lt; epsilon_g\n            break\n        end\n    end\n    return x\nend\n\nSuppose we want to solve the following problem \\[\n\\min_{x} f(x)\n\\] where, for some \\(d&gt;1\\), \\[\nf(x) = \\sum_{i=1}^d \\left((x_i-3)^2 \\right)\n\\] The gradient of this function is \\[\n\\nabla f(x)=\\begin{pmatrix}2(x_{1}-3)\\\\\n2(x_{2}-3)\\\\\n\\vdots\\\\\n2(x_{d}-3)\n\\end{pmatrix}.\n\\]\nThe minimum of this function is \\(x_i = 3\\).\n\ndef f(x):\n    return np.sum((x-3.0)**2)\n\ndef gradient(x):\n    return 2*(x-3.0)\n\nsteepest_descent(f, gradient, np.array([0., 0.]), 0.2)\n\nIteration 1: x = [1.2 1.2], f(x) = 6.479999999999999, ||g(x)||=8.48528137423857\nIteration 2: x = [1.92 1.92], f(x) = 2.3327999999999993, ||g(x)||=5.091168824543142\nIteration 3: x = [2.352 2.352], f(x) = 0.8398079999999992, ||g(x)||=3.0547012947258847\nIteration 4: x = [2.6112 2.6112], f(x) = 0.3023308799999997, ||g(x)||=1.8328207768355302\nIteration 5: x = [2.76672 2.76672], f(x) = 0.10883911679999973, ||g(x)||=1.099692466101318\nIteration 6: x = [2.860032 2.860032], f(x) = 0.039182082047999806, ||g(x)||=0.6598154796607905\nIteration 7: x = [2.9160192 2.9160192], f(x) = 0.014105549537279988, ||g(x)||=0.39588928779647375\nIteration 8: x = [2.94961152 2.94961152], f(x) = 0.005077997833420814, ||g(x)||=0.23753357267788475\nIteration 9: x = [2.96976691 2.96976691], f(x) = 0.0018280792200315037, ||g(x)||=0.1425201436067311\nIteration 10: x = [2.98186015 2.98186015], f(x) = 0.0006581085192113414, ||g(x)||=0.08551208616403891\nIteration 11: x = [2.98911609 2.98911609], f(x) = 0.00023691906691608675, ||g(x)||=0.051307251698423345\nIteration 12: x = [2.99346965 2.99346965], f(x) = 8.529086408979587e-05, ||g(x)||=0.03078435101905426\nIteration 13: x = [2.99608179 2.99608179], f(x) = 3.070471107232651e-05, ||g(x)||=0.01847061061143306\nIteration 14: x = [2.99764908 2.99764908], f(x) = 1.1053695986035874e-05, ||g(x)||=0.011082366366859834\nIteration 15: x = [2.99858945 2.99858945], f(x) = 3.9793305549719125e-06, ||g(x)||=0.0066494198201153985\nIteration 16: x = [2.99915367 2.99915367], f(x) = 1.4325589997895879e-06, ||g(x)||=0.003989651892068737\nIteration 17: x = [2.9994922 2.9994922], f(x) = 5.15721239924432e-07, ||g(x)||=0.002393791135240991\nIteration 18: x = [2.99969532 2.99969532], f(x) = 1.8565964637257903e-07, ||g(x)||=0.0014362746811448456\nIteration 19: x = [2.99981719 2.99981719], f(x) = 6.683747269425835e-08, ||g(x)||=0.000861764808686405\nIteration 20: x = [2.99989032 2.99989032], f(x) = 2.4061490169894037e-08, ||g(x)||=0.0005170588852123454\nIteration 21: x = [2.99993419 2.99993419], f(x) = 8.662136461115092e-09, ||g(x)||=0.00031023533112715604\nIteration 22: x = [2.99996051 2.99996051], f(x) = 3.118369125973376e-09, ||g(x)||=0.0001861411986757912\nIteration 23: x = [2.99997631 2.99997631], f(x) = 1.1226128853672496e-09, ||g(x)||=0.00011168471920497228\nIteration 24: x = [2.99998578 2.99998578], f(x) = 4.0414063872210937e-10, ||g(x)||=6.70108315234858e-05\nIteration 25: x = [2.99999147 2.99999147], f(x) = 1.454906299338991e-10, ||g(x)||=4.020649891358905e-05\nIteration 26: x = [2.99999488 2.99999488], f(x) = 5.237662677983984e-11, ||g(x)||=2.4123899347651e-05\nIteration 27: x = [2.99999693 2.99999693], f(x) = 1.8855585639651492e-11, ||g(x)||=1.447433960909303e-05\nIteration 28: x = [2.99999816 2.99999816], f(x) = 6.788010829620027e-12, ||g(x)||=8.684603765204602e-06\nIteration 29: x = [2.99999889 2.99999889], f(x) = 2.4436838986632097e-12, ||g(x)||=5.210762258871547e-06\nIteration 30: x = [2.99999934 2.99999934], f(x) = 8.797262039900029e-13, ||g(x)||=3.1264573553229284e-06\nIteration 31: x = [2.9999996 2.9999996], f(x) = 3.167014331536526e-13, ||g(x)||=1.8758744136961865e-06\nIteration 32: x = [2.99999976 2.99999976], f(x) = 1.1401251593531493e-13, ||g(x)||=1.1255246477152823e-06\nIteration 33: x = [2.99999986 2.99999986], f(x) = 4.10445057876081e-14, ||g(x)||=6.753147886291694e-07\nIteration 34: x = [2.99999991 2.99999991], f(x) = 1.477602202246525e-14, ||g(x)||=4.0518887342871644e-07\nIteration 35: x = [2.99999995 2.99999995], f(x) = 5.31936792808749e-15, ||g(x)||=2.431133235548003e-07\nIteration 36: x = [2.99999997 2.99999997], f(x) = 1.914972432124978e-15, ||g(x)||=1.4586799413288017e-07\nIteration 37: x = [2.99999998 2.99999998], f(x) = 6.893900623730809e-16, ||g(x)||=8.752079597729852e-08\n\n\narray([2.99999998, 2.99999998])\n\n\nfunction f(x)\n    sum((x.-3.0).^2)\nend\n\nfunction gradient(x)\n    2.*(x.-3.0)\nend\n\nsteepest_descent(f, gradient, [.0, .0], 0.2)"
  },
  {
    "objectID": "comptools_ass2.html#calculating-the-derivative",
    "href": "comptools_ass2.html#calculating-the-derivative",
    "title": "Optimization",
    "section": "Calculating the derivative",
    "text": "Calculating the derivative\nWhen the gradient is difficult to calculate analytically, we can use algorithmically calculate the derivative of the function \\(f\\).\n\nFinite difference: We use \\[\n\\lim_{h} \\frac{f(x+h) - f(x)}{h}\n\\]\n\nusing FiniteDifferences\n\n# Create a central finite difference method with the default settings\nfdm = central_fdm(5, 1)\n\n# Calculate the gradient at a point\nx0 = [1.0, 2.0]\ngradient = grad(fdm, f, x0)\n\nprintln(\"Numerical Gradient:\", gradient)\n\nimport numpy as np\nfrom scipy.optimize import approx_fprime\n\n\nepsilon = np.sqrt(np.finfo(float).eps)  \n\n# Point at which to calculate the gradient\nx0 = np.array([1.0, 2.0])\n\n# Calculate the gradient at the point x0\ngradient = approx_fprime(x0, f, epsilon)\n\nprint(\"Gradient at x0:\", gradient)\n\nGradient at x0: [-4. -2.]\n\n\n\nAutomatic differentiation\n\nAutomatic Differentiation (AD) is a computational technique used to evaluate the derivative of a function specified by a computer program. AD exploits the fact that any computer program, no matter how complex, executes a sequence of elementary arithmetic operations and functions (like additions, multiplications, and trigonometric functions). By applying the chain rule to these operations, AD efficiently computes derivatives of arbitrary order, which are accurate up to machine precision. This contrasts with numerical differentiation, which can introduce significant rounding errors.\nOne popular Python library that implements automatic differentiation is autograd. It extends the capabilities of NumPy by allowing you to automatically compute derivatives of functions composed of many standard mathematical operations. Here is a simple example of using autograd to compute the derivative of a function:\nNow, let’s compute the derivative of the function defined above.\n\nimport autograd.numpy as np   # Import wrapped NumPy\nfrom autograd import grad    # Import the gradient function\n\n# Create a function that returns the derivative of f\ndf = grad(f)\n\n# Evaluate the derivative at x = pi\nprint(\"The derivative of f(x) at x = [0.2, 0.1] is:\", df(np.array([0.2, 0.1])))\n\nThe derivative of f(x) at x = [0.2, 0.1] is: [-5.6 -5.8]\n\n\nWhen comparing the precision and applicability of finite difference methods and automatic differentiation (AD), especially for functions with large input dimensions, there are several key points to consider.\nFinite difference methods approximate derivatives by evaluating differences in function values at nearby points. The accuracy of these methods is highly dependent on the step size chosen: too large, and the approximation becomes poor; too small, and floating-point errors can dominate the result. This trade-off can be particularly challenging in high-dimensional spaces as errors can accumulate more significantly (each partial derivative may introduce errors that affect the overall gradient computation).\nAD computes derivatives using the exact chain rule and is not based on numerical approximations of difference quotients. Therefore, it can provide derivatives that are accurate to machine precision. AD efficiently handles computations in high dimensions because it systematically applies elementary operations and chain rules, bypassing the curse of dimensionality that often affects finite difference methods. AD is less sensitive to the numerical issues that affect finite differences, such as choosing a step size or dealing with subtractive cancellation.\nThe visualization provided by @fig-error demonstrates the comparative performance of the finite difference method and automatic differentiation (AD) when used to calculate gradients. This graph illustrates a key observation: as the dimensionality of the input increases, the error associated with the finite difference method tends to rise almost linearly. This escalation in error is accompanied by an increase in computation time, underscoring the method’s sensitivity to higher dimensions.\nIn contrast, the automatic differentiation method showcases remarkable stability across dimensions. The error remains negligible, essentially zero, highlighting AD’s inherent precision. Furthermore, AD’s computation time remains consistent regardless of input dimensionality. This performance characteristic of AD is due to its methodological approach, which systematically applies the chain rule to derive exact derivatives, bypassing the numerical instability and scaling issues often encountered with finite differences.\nThese insights are particularly relevant in fields that rely heavily on precise and efficient computation of derivatives, such as in numerical optimization, machine learning model training, and dynamic systems simulation. The stability and scalability of AD make it an invaluable tool in these areas, especially when dealing with high-dimensional data sets or complex models.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport time\n\ndef multivariate_function(x):\n    \"\"\" A sample multivariate function, sum of squares plus sin of each component. \"\"\"\n    return np.sum(x**2 + np.sin(x))\n\ndef analytical_derivative(x):\n    \"\"\" Analytical derivative of the multivariate function. \"\"\"\n    return 2*x + np.cos(x)\n\ndef finite_difference_derivative(f, x, h=1e-5):\n    \"\"\" Compute the gradient of `f` at `x` using the central finite difference method. \"\"\"\n    grad = np.zeros_like(x)\n    for i in range(len(x)):\n        x_plus = np.copy(x)\n        x_minus = np.copy(x)\n        x_plus[i] += h\n        x_minus[i] -= h\n        grad[i] = (f(x_plus) - f(x_minus)) / (2*h)\n    return grad\n\n# Range of dimensions\ndimensions = range(1, 101)\nerrors = []\ntimes = []\n\n# Loop over dimensions\nfor dim in dimensions:\n    x = np.random.randn(dim)\n    \n    # Analytical derivative\n    true_grad = analytical_derivative(x)\n    \n    # Start timing\n    start_time = time.time()\n    \n    # Finite difference derivative\n    fd_grad = finite_difference_derivative(multivariate_function, x)\n    \n    # End timing\n    elapsed_time = time.time() - start_time\n    times.append(elapsed_time)\n    \n    # Error\n    error = np.linalg.norm(fd_grad - true_grad)\n    errors.append(error)\n\n# Plotting error\nplt.figure(figsize=(14, 6))\n\nplt.subplot(1, 2, 1)\nplt.plot(dimensions, errors, marker='o')\nplt.xlabel('Number of Dimensions')\nplt.ylabel('Error')\nplt.title('Approximation Error by Dimension')\nplt.grid(True)\n\n# Plotting computational time\nplt.subplot(1, 2, 2)\nplt.plot(dimensions, times, marker='o')\nplt.xlabel('Number of Dimensions')\nplt.ylabel('Time (seconds)')\nplt.title('Computational Time by Dimension')\nplt.grid(True)\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 2\n\n\n\n\n\n\nUsing solver\nIt is almost always advantageous to utilize established minimization routines and libraries rather than crafting custom code from scratch. This approach not only saves time but also leverages the extensive testing and optimizations embedded within these libraries, which are designed to handle a broad range of mathematical challenges efficiently and accurately.\nIn Python, the scipy.optimize module from the SciPy library is a robust toolkit that provides several algorithms for function minimization, including methods for unconstrained and constrained optimization. Some of the notable algorithms include BFGS, Nelder-Mead, and conjugate gradient, among others. These algorithms are well-suited for numerical optimization in scientific computing.\nIn Julia, Optim.jl offers a similar breadth of optimization routines, with support for a variety of optimization problems, from simple univariate function minimization to complex multivariate cases. Optim.jl includes algorithms like L-BFGS, Gradient Descent, and Newton’s Method, each tailored for specific types of optimization scenarios.\nBoth Python’s SciPy and Julia’s Optim.jl represent just a slice of the available tools. There are many other solvers and libraries dedicated to optimization. The most widely used is Ipopt which is particularly useful for problems that require embedding in lower-level systems for performance.\nThe choice of a solver can depend on several factors:\n\nProblem Type: Some solvers are better suited for large-scale problems, others for problems with complex constraints, or for nondifferentiable or noisy functions.\nAccuracy and Precision: Different algorithms and implementations can provide varying levels of precision and robustness, important in applications like aerospace or finance.\nPerformance and Speed: Depending on the implementation, some solvers might be optimized for speed using advanced techniques like parallel processing or tailored data structures.\nEase of Use and Flexibility: Some libraries offer more user-friendly interfaces and better documentation, which can be crucial for less experienced users or complex projects where customization is key.\n\n\n\nJulia’s Optim.jl\nOptim.jl supports various optimization algorithms. For our simple example, we can use the BFGS method, which is suitable for smooth functions and is part of a family of quasi-Newton methods.\nYou can now call the optimize function from Optim.jl, specifying the function, an initial guess, and the optimization method. Here is how you do it:\n# Initial guess\ninitial_guess = [0.0, 0.0]\n\n# Perform the optimization\nresult = optimize(f, initial_guess, BFGS())\nThe result object contains all the information about the optimization process, including the optimal values found, the value of the function at the optimum, and the convergence status:\n# Access the results\nprintln(\"Optimal parameters: \", Optim.minimizer(result))\nprintln(\"Minimum value: \", Optim.minimum(result))\nprintln(\"Convergence information: \", result)\nIf your function is more complex or if you want to speed up the convergence for large-scale problems, you can also provide the gradient (and even the Hessian) to the optimizer. Optim.jl can utilize these for more efficient calculations.\nFor constrained optimization, Optim.jl has support for simple box constraints which can be set using the Fminbox method to wrap around other methods like BFGS.\n# Define the bounds\nlower_bounds = [0.5, 1.5]\nupper_bounds = [1.5, 2.5]\n\n# Initial guess within the bounds\ninitial_guess = [1.0, 2.0]\n\n# Set up the optimizer with Fminbox\noptimizer = Fminbox(BFGS())\n# Run the optimization with bounds\nresult = optimize(f, lower_bounds, upper_bounds, initial_guess, optimizer, Optim.Options(g_tol = 1e-6))"
  },
  {
    "objectID": "comptools_ass2.html#pythons-minimize",
    "href": "comptools_ass2.html#pythons-minimize",
    "title": "Optimization",
    "section": "Python’s minimize",
    "text": "Python’s minimize\nThe scipy.optimize.minimize function in Python is a versatile solver for minimization problems of both unconstrained and constrained functions. It provides a wide range of algorithms for different kinds of optimization problems.\nSciPy’s minimize function supports various methods like ‘BFGS’, ‘Nelder-Mead’, ‘TNC’, etc. The choice of method can depend on the nature of your problem (e.g., whether it has constraints, whether the function is differentiable, etc.). As in the Julia’s discussion, we’ll use ‘BFGS’.\n\nimport numpy as np\nfrom scipy.optimize import minimize\ninitial_guess = np.array([0, 0])\nresult = minimize(f, initial_guess, method='BFGS')\n\nprint(\"Optimal parameters:\", result.x)\nprint(\"Minimum value:\", result.fun)\nprint(\"Success:\", result.success)\nprint(\"Message:\", result.message)\n\nOptimal parameters: [2.99999999 2.99999999]\nMinimum value: 2.460284085377308e-16\nSuccess: True\nMessage: Optimization terminated successfully.\n\n\nTo add some bounds to the variables we can use the Bounds module.\n\nfrom scipy.optimize import Bounds\n\n# Define bounds (0, +Inf) for all parameters\nbounds = Bounds(np.array([0., 0.]), [np.inf, np.inf])\n\n# Run the optimization with bounds\nresult_with_bounds = minimize(f, initial_guess, method='L-BFGS-B', bounds=bounds)\nprint(\"Optimal parameters:\", result_with_bounds.x)\nprint(\"Minimum value:\", result_with_bounds.fun)\nprint(\"Success:\", result_with_bounds.success)\nprint(\"Message:\", result_with_bounds.message)\n\nOptimal parameters: [3.00000044 3.00000044]\nMinimum value: 3.9332116120454443e-13\nSuccess: True\nMessage: CONVERGENCE: NORM_OF_PROJECTED_GRADIENT_&lt;=_PGTOL"
  },
  {
    "objectID": "comptools_ass2.html#assignment",
    "href": "comptools_ass2.html#assignment",
    "title": "Optimization",
    "section": "Assignment",
    "text": "Assignment\nTasks:\n\nCoding the Likelihood Function\n\nImplement the likelihood function for an AR(7) model in Python. You are required to code both the conditional and unconditional likelihood functions.\nConditional Likelihood: This approach uses the first 7 observations as given and starts the likelihood calculation from the 8th observation.\nUnconditional Likelihood: This approach integrates over the initial conditions (first 7 observations) using their theoretical or estimated distribution.\n\nUse the following model specification for the AR(7) process: \\[\ny_t = \\phi_0 + \\phi_1 y_{t-1} + \\phi_2 y_{t-2} + \\dots + \\phi_7 y_{t-7} + \\epsilon_t\n\\] where \\(\\epsilon_t\\) is i.i.d. normal with mean zero and variance \\(\\sigma^2\\).\nMaximizing the Likelihood\n\nWrite Python, Julia or R code to maximize the likelihood functions (both conditional and unconditional) with respect to the parameters \\(\\phi_0, \\phi_1, \\dots, \\phi_7,\\) and \\(\\sigma^2\\). You may consider using optimization routines available in libraries such as scipy.optimize or Optim.jl.\n\nParameter Estimation\n\nEstimate the parameters of the AR(7) model using both conditional and unconditional likelihood approaches. Utilize the monthly log differences of INDPRO from the FRED-MD dataset for this purpose.\nYou will need to preprocess the data to calculate log differences.\n\nForecasting\n\nWith the estimated parameters from both approaches, forecast the future values of the log differences of INDPRO for the next 8 months (\\(h=1,2,\\dots,8\\)).\n(Optional) Provide a brief comparison of the forecast accuracy from both sets of parameters based on out-of-sample forecasting. Discuss any notable differences and potential reasons for these differences.\n\n\nDeliverables: - A Python script containing the implementations and results for the tasks outlined above. - A report discussing the methodology, results, and insights from the forecasting comparison. Include visualizations of the forecast against actual data if available.\nAssessment Criteria: - Correctness and efficiency of the likelihood function implementations. - Accuracy and robustness of the optimization procedure. - Clarity and depth of the analysis in the report, especially in discussing the different outcomes from the conditional and unconditional methods. - Quality of the code, including readability and proper documentation.\nResources: - FRED-MD dataset: Access the dataset directly from the FRED website or through any API that provides access to it. - SciPy library documentation for optimization functions. - Optim.jl\nThis assignment will test your ability to implement statistical models, manipulate time-series data, perform parameter estimation, and use statistical methods to forecast future values."
  },
  {
    "objectID": "comptools_ass2.html#footnotes",
    "href": "comptools_ass2.html#footnotes",
    "title": "Optimization",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nA neighborhood of a point \\(x\\in\\mathbb{R}\\) is any open subset of \\(\\mathbb{R}^k\\) containing \\(x\\).↩︎\nA square matrix \\(H\\) is positive definite if for every \\(z\\in\\mathbb{R}^k\\) with \\(\\norm{z}\\neq 0\\), \\(z'Hz&gt;0\\).↩︎\ntermanation↩︎"
  },
  {
    "objectID": "junk/comptools_ass1.html",
    "href": "junk/comptools_ass1.html",
    "title": "Computational Tools for Macroeconometrics",
    "section": "",
    "text": "This assignment introduces students to practical and theoretical aspects of macroeconometrics, focusing on forecasting using the FRED-MD dataset. Students will learn to handle macroeconomic data, perform necessary transformations, apply univariate models to predict key economic indicators and to evaluate these forecasts."
  },
  {
    "objectID": "junk/comptools_ass1.html#introduction",
    "href": "junk/comptools_ass1.html#introduction",
    "title": "Computational Tools for Macroeconometrics",
    "section": "",
    "text": "This assignment introduces students to practical and theoretical aspects of macroeconometrics, focusing on forecasting using the FRED-MD dataset. Students will learn to handle macroeconomic data, perform necessary transformations, apply univariate models to predict key economic indicators and to evaluate these forecasts."
  },
  {
    "objectID": "junk/comptools_ass1.html#the-fred-md-dataset",
    "href": "junk/comptools_ass1.html#the-fred-md-dataset",
    "title": "Computational Tools for Macroeconometrics",
    "section": "The FRED-MD dataset",
    "text": "The FRED-MD dataset\nThe FRED-MD dataset is a comprehensive monthly database for macroeconomic research compiled by the Federal Reserve Bank of St. Louis. It features a wide array of economic indicators. The list of economic indicators can be obtained from the paper accompanying the data pdf.\nThe data can be downloaded here. The page contains all the different vintages of the data.\nLet us start to download the current.csv file:\n\nimport pandas as pd\n\n# Load the dataset\ndf = pd.read_csv('~/Downloads/current.csv')\n\n# Clean the DataFrame by removing the row with transformation codes\ndf_cleaned = df.drop(index=0)\ndf_cleaned.reset_index(drop=True, inplace=True)\ndf_cleaned['sasdate'] = pd.to_datetime(df_cleaned['sasdate'], format='%m/%d/%Y')\ndf_cleaned\n\n\n\n\n\n\n\n\n\nsasdate\nRPI\nW875RX1\nDPCERA3M086SBEA\nCMRMTSPLx\nRETAILx\nINDPRO\nIPFPNSS\nIPFINAL\nIPCONGD\n...\nDNDGRG3M086SBEA\nDSERRG3M086SBEA\nCES0600000008\nCES2000000008\nCES3000000008\nUMCSENTx\nDTCOLNVHFNM\nDTCTHFNM\nINVEST\nVIXCLSx\n\n\n\n\n0\n1959-01-01\n2583.560\n2426.0\n15.188\n2.766768e+05\n18235.77392\n21.9665\n23.3891\n22.2688\n31.7011\n...\n18.294\n10.152\n2.13\n2.45\n2.04\nNaN\n6476.00\n12298.00\n84.2043\nNaN\n\n\n1\n1959-02-01\n2593.596\n2434.8\n15.346\n2.787140e+05\n18369.56308\n22.3966\n23.7048\n22.4617\n31.9337\n...\n18.302\n10.167\n2.14\n2.46\n2.05\nNaN\n6476.00\n12298.00\n83.5280\nNaN\n\n\n2\n1959-03-01\n2610.396\n2452.7\n15.491\n2.777753e+05\n18523.05762\n22.7193\n23.8483\n22.5719\n31.9337\n...\n18.289\n10.185\n2.15\n2.45\n2.07\nNaN\n6508.00\n12349.00\n81.6405\nNaN\n\n\n3\n1959-04-01\n2627.446\n2470.0\n15.435\n2.833627e+05\n18534.46600\n23.2032\n24.1927\n22.9026\n32.4374\n...\n18.300\n10.221\n2.16\n2.47\n2.08\nNaN\n6620.00\n12484.00\n81.8099\nNaN\n\n\n4\n1959-05-01\n2642.720\n2486.4\n15.622\n2.853072e+05\n18679.66354\n23.5528\n24.3936\n23.1231\n32.5925\n...\n18.280\n10.238\n2.17\n2.48\n2.08\n95.3\n6753.00\n12646.00\n80.7315\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n776\n2023-09-01\n19111.748\n15741.9\n116.594\n1.507530e+06\n705304.00000\n103.2096\n101.0935\n101.3665\n102.1034\n...\n120.395\n123.976\n29.90\n34.55\n26.62\n67.9\n508808.61\n913938.95\n5074.6108\n15.0424\n\n\n777\n2023-10-01\n19145.402\n15784.6\n116.663\n1.505477e+06\n703528.00000\n102.3722\n100.5292\n100.5527\n101.1664\n...\n120.040\n124.228\n29.97\n34.67\n26.65\n63.8\n513229.64\n918210.64\n5015.5456\n19.0462\n\n\n778\n2023-11-01\n19213.108\n15859.9\n117.127\n1.514733e+06\n703336.00000\n102.6710\n100.9362\n101.2159\n101.8557\n...\n119.325\n124.551\n30.26\n34.96\n26.89\n61.3\n517434.30\n922552.40\n4999.7208\n13.8563\n\n\n779\n2023-12-01\n19251.946\n15899.0\n117.773\n1.530296e+06\n706180.00000\n102.6715\n100.8332\n101.2843\n101.9884\n...\n119.193\n124.917\n30.45\n35.01\n27.14\n69.7\n522366.13\n928336.14\n5077.4222\n12.6960\n\n\n780\n2024-01-01\n19377.558\n15948.8\n117.639\nNaN\n700291.00000\n102.5739\n100.9984\n101.7258\n102.6235\n...\n118.745\n125.662\n30.56\n35.21\n27.22\nNaN\nNaN\nNaN\n5105.3504\n13.3453\n\n\n\n\n781 rows × 128 columns\n\n\n\n\n\n# Extract transformation codes\ntransformation_codes = df.iloc[0, 1:].to_frame().reset_index()\ntransformation_codes.columns = ['Series', 'Transformation_Code']\n\nThe transformation codes map variables to the transformations we must apply to each variable to render them (approximately) stationary. The data frame transformation_codes has the variable’s name (Series) and its transformation (Transformation_Code). There are six possible transformations (\\(x_t\\) denotes the variable to which the transformation is to be applied):\n\ntransformation_code=1: no trasformation\ntransformation_code=2: \\(\\Delta x_t\\)\ntransformation_code=3: \\(\\Delta^2 x_t\\)\ntransformation_code=4: \\(log(x_t)\\)\ntransformation_code=5: \\(\\Delta log(x_t)\\)\ntransformation_code=6: \\(\\Delta^2 log(x_t)\\)\ntransformation_code=7: \\(\\Delta (x_t/x_{t-1} - 1)\\)\n\nWe can apply these transformations using the following code:\n\nimport numpy as np\n\n# Function to apply transformations based on the transformation code\ndef apply_transformation(series, code):\n    if code == 1:\n        # No transformation\n        return series\n    elif code == 2:\n        # First difference\n        return series.diff()\n    elif code == 3:\n        # Second difference\n        return series.diff().diff()\n    elif code == 4:\n        # Log\n        return np.log(series)\n    elif code == 5:\n        # First difference of log\n        return np.log(series).diff()\n    elif code == 6:\n        # Second difference of log\n        return np.log(series).diff().diff()\n    elif code == 7:\n        # Delta (x_t/x_{t-1} - 1)\n        return series.pct_change()\n    else:\n        raise ValueError(\"Invalid transformation code\")\n\n# Applying the transformations to each column in df_cleaned based on transformation_codes\nfor series_name, code in transformation_codes.values:\n    df_cleaned[series_name] = apply_transformation(df_cleaned[series_name].astype(float), float(code))\n\n\n1df_cleaned = df_cleaned[2:]\n2df_cleaned.reset_index(drop=True, inplace=True)\ndf_cleaned.head()\n\n\n1\n\nSince some transformations induce missing values, we drop the first two observations of the dataset\n\n2\n\nWe reset the index so that the first observation of the dataset has index 0\n\n\n\n\n\n\n\n\n\n\n\n\nsasdate\nRPI\nW875RX1\nDPCERA3M086SBEA\nCMRMTSPLx\nRETAILx\nINDPRO\nIPFPNSS\nIPFINAL\nIPCONGD\n...\nDNDGRG3M086SBEA\nDSERRG3M086SBEA\nCES0600000008\nCES2000000008\nCES3000000008\nUMCSENTx\nDTCOLNVHFNM\nDTCTHFNM\nINVEST\nVIXCLSx\n\n\n\n\n0\n1959-03-01\n0.006457\n0.007325\n0.009404\n-0.003374\n0.008321\n0.014306\n0.006035\n0.004894\n0.000000\n...\n-0.001148\n0.000292\n-0.000022\n-0.008147\n0.004819\nNaN\n0.004929\n0.004138\n-0.014792\nNaN\n\n\n1\n1959-04-01\n0.006510\n0.007029\n-0.003622\n0.019915\n0.000616\n0.021075\n0.014338\n0.014545\n0.015650\n...\n0.001312\n0.001760\n-0.000022\n0.012203\n-0.004890\nNaN\n0.012134\n0.006734\n0.024929\nNaN\n\n\n2\n1959-05-01\n0.005796\n0.006618\n0.012043\n0.006839\n0.007803\n0.014955\n0.008270\n0.009582\n0.004770\n...\n-0.001695\n-0.001867\n-0.000021\n-0.004090\n-0.004819\nNaN\n0.002828\n0.002020\n-0.015342\nNaN\n\n\n3\n1959-06-01\n0.003068\n0.003012\n0.003642\n-0.000097\n0.009064\n0.001141\n0.007034\n0.007128\n-0.004767\n...\n0.003334\n0.001946\n-0.004619\n0.003992\n0.004796\nNaN\n0.009726\n0.009007\n-0.012252\nNaN\n\n\n4\n1959-07-01\n-0.000580\n-0.000762\n-0.003386\n0.012155\n-0.000330\n-0.024240\n0.001168\n0.008249\n0.013054\n...\n-0.001204\n-0.000013\n0.000000\n-0.004040\n-0.004796\nNaN\n-0.004631\n-0.001000\n0.029341\nNaN\n\n\n\n\n5 rows × 128 columns\n\n\n\n\n\n1import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\n2series_to_plot = ['INDPRO', 'CPIAUCSL', 'TB3MS']\nseries_names = ['Industrial Production',\n                'Inflation (CPI)',\n                '3-month Treasury Bill rate']\n\n\n# Create a figure and a grid of subplots\n3fig, axs = plt.subplots(len(series_to_plot), 1, figsize=(8, 15))\n\n# Iterate over the selected series and plot each one\nfor ax, series_name, plot_title in zip(axs, series_to_plot, series_names):\n4    if series_name in df_cleaned.columns:\n5        dates = pd.to_datetime(df_cleaned['sasdate'], format='%m/%d/%Y')\n6        ax.plot(dates, df_cleaned[series_name], label=plot_title)\n7        ax.xaxis.set_major_locator(mdates.YearLocator(base=5))\n        ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n8        ax.set_title(plot_title)\n9        ax.set_xlabel('Year')\n        ax.set_ylabel('Transformed Value')\n10        ax.legend(loc='upper left')\n11        plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha='right')\n    else:\n        ax.set_visible(False)  # Hide plots for which the data is not available\n\n12plt.tight_layout()\n13plt.show()\n\n\n1\n\nWe use library matplotlib to plot\n\n2\n\nWe consider three series (INDPRO, CPIAUCSL, TB3MS) and assign them human-readable names (“Industrial Production”, “Inflation (CPI)”, “3-month Treasury Bill rate.”).\n\n3\n\nWe create a figure with three (len(series_to_plot)) subplots arranged vertically. The figure size is 8x15 inches.\n\n4\n\nWe check if the series exists in each series df_cleaned DataFrame columns.\n\n5\n\nWe convert the sasdate column to datetime format (not necessary, since sasdate was converter earlier)\n\n6\n\nWe plot each series against the sasdate on the corresponding subplot, labeling the plot with its human-readable name.\n\n7\n\nWe format the x-axis to display ticks and label the x-axis with dates taken every five years.\n\n8\n\nEach subplot is titled with the name of the economic indicator.\n\n9\n\nWe label the x-axis “Year,” and the y-axis “Transformed Value,” to indicate that the data was transformed before plotting.\n\n10\n\nA legend is added to the upper left of each subplot for clarity.\n\n11\n\nWe rotate the x-axis labels by 45 degrees to prevent overlap and improve legibility.\n\n12\n\nplt.tight_layout() automatically adjusts subplot parameters to give specified padding and avoid overlap.\n\n13\n\nplt.show() displays the figure with its subplots."
  },
  {
    "objectID": "junk/comptools_ass1.html#forecasting-in-time-series",
    "href": "junk/comptools_ass1.html#forecasting-in-time-series",
    "title": "Computational Tools for Macroeconometrics",
    "section": "Forecasting in Time Series",
    "text": "Forecasting in Time Series\nForecasting in time series analysis involves using historical data to predict future values. The objective is to model the conditional expectation of a time series based on past observations.\n\nDirect Forecasts\nDirect forecasting involves modeling the target variable directly at the desired forecast horizon. Unlike iterative approaches, which forecast one step ahead and then use those forecasts as inputs for subsequent steps, direct forecasting directly models the relationship between past observations and future value.\n\n\nARX Models\nAutoregressive Moving with predictors (ARX) models are a class of univariate time series models that extend ARMA models by incorporating exogenous (independent) variables. These models are formulated as follows:\n\\[\n\\begin{aligned}\nY_{t+h} &=  \\alpha + \\phi_0 Y_t + \\phi_1 Y_{t-1} + \\dots + \\phi_p Y_{t-p} + \\theta_{0,1} X_{t,1} + \\theta_{1,1} X_{t-1,1} + \\dots + \\theta_{p,1} X_{t-p,1} + \\dots + \\theta_{0,k} X_{t,k} + \\dots + \\theta_{p,k} X_{t-p,k} + u_{t+h}\\\\\n        &=  \\alpha + \\sum_{i=0}^p \\phi_i Y_{t-i} + \\sum_{j=1}^k\\sum_{s=0}^p \\theta_{s,j} X_{t-s,j} + \\epsilon_{t+h}\n\\end{aligned}\n\\tag{1}\\]\n\n\\(Y_{t+h}\\): The target variable at time \\(t+h\\).\n\\(X_{t,j}\\): Predictors (variable \\(j=1,\\ldots,k\\) at time \\(t\\)).\n\\(p\\) number of lags of the target and the predictors.1\n\\(\\phi_i\\), \\(i=0,\\dots,p\\), and \\(\\theta_{j,s}\\), \\(j=1,\\dots,k\\), \\(s=1,\\ldots,r\\): Parameters of the model.\n\\(\\epsilon_{t+h}\\): error term.\n\nFor instance, to predict Industrial Prediction using as predictor inflation and the 3-month t-bill, the target variable is INDPRO, and the predictors are CPIAUSL and TB3MS. Notice that the target and the predictors are the transformed variables. Thus, if we use INDPRO as the target, we are predicting the log-difference of industrial production, which is a good approximation for its month-to-month percentage change.\nBy convention, the data ranges from \\(t=1,\\ldots,T\\), where \\(T\\) is the last period, we have data (for the df_cleaned dataset, \\(T\\) corresponds to January 2024).\n\n\nForecasting with ARX\nSuppose that we know the parameters of the model for the moment. To obtain a forecast for \\(Y_{T+h}\\), the \\(h\\)-step ahead forecast, we calculate \\[\n\\begin{aligned}\n\\hat{Y}_{T+h} &=  \\alpha + \\phi_0 Y_T + \\phi_1 Y_{T-1} + \\dots + \\phi_p Y_{T-p} \\\\\n                  &\\,\\,\\quad \\quad + \\theta_{0,1} X_{T,1} + \\theta_{1,1} X_{T-1,1} + \\dots + \\theta_{p,1} X_{T-p,1} \\\\\n                  &\\,\\,\\quad \\quad + \\dots + \\theta_{0,k} X_{T,k} + \\dots + \\theta_{p,k} X_{T-p,k}\\\\\n        &=  \\alpha + \\sum_{i=0}^p \\phi_i Y_{T-i} + \\sum_{j=1}^k\\sum_{s=0}^p \\theta_{s,j} X_{T-s,j}\n\\end{aligned}\n\\]\nWhile this is conceptually easy, implementing the steps needed to calculate the forecast is insidious, and care must be taken to ensure we are calculating the correct forecast.\nTo start, it is convenient to rewrite the model in Equation 1 as a linear model \\[\n\\mathbf{y} = \\mathbf{X}\\boldsymbol{\\beta} + \\mathbf{u},\n\\] where \\(\\boldsymbol{\\beta}\\) is the vector (of size \\(1+(1+p)(1+k)\\)) \\[\n\\boldsymbol{\\beta}=\\begin{pmatrix}\\alpha\\\\\n\\phi_{0}\\\\\n\\vdots\\\\\n\\phi_{p}\\\\\n\\theta_{0,1}\\\\\n\\vdots\\\\\n\\theta_{p,1}\\\\\n\\vdots\\\\\n\\theta_{1,k}\\\\\n\\vdots\\\\\n\\theta_{p,k}\n\\end{pmatrix},\n\\] \\(\\mathbf{y}\\) and \\(\\mathbf{X}\\) are respectively given by \\[\n\\mathbf{y} = \\begin{pmatrix}\ny_{p+h+1}  \\\\\ny_{p+h+2}\\\\\n\\vdots \\\\\ny_{T}\n\\end{pmatrix}\n\\] and \\[\n\\mathbf{X} = \\begin{pmatrix}1 & Y_{p+1} & Y_{p} & \\cdots & Y_{1} & X_{p+1,1} & X_{p,1} & \\cdots & X_{1,1} & X_{p+1,k} & X_{p,k} & \\cdots & X_{1,k}\\\\\n\\vdots & \\vdots & \\vdots &  & \\vdots & \\vdots & \\vdots &  & \\vdots & \\vdots & \\vdots &  & \\vdots\\\\\n1 & Y_{T-h-1} & Y_{T-h-2} & \\cdots & Y_{T-h-p-1} & X_{T-h-1,1} & X_{T-h-2,1} & \\cdots & X_{T-h-p-1,1} & X_{T-h-1,k} & X_{T-h-2,k} & \\cdots & X_{T-h-p-1,k}\\\\\n1 & Y_{T-h} & Y_{T-h-1} & \\cdots & Y_{T-h-p} & X_{T-h,1} & X_{T-h-1,1} & \\cdots & X_{T-h-p,1} & X_{T-h,k} & X_{T-h-1,k} &  & X_{T-h-p,k}\n\\end{pmatrix}.\n\\] The size of \\(\\mathbf{X}\\) is \\((T-p-h)\\times 1+(1+k)(1+p)\\) and that of \\(\\mathbf{y}\\) is \\(T-h-p\\).\nThe matrix \\(\\mathbf{X}\\) can be obtained in the following way:\n\nYraw = df_cleaned['INDPRO']\nXraw = df_cleaned[['CPIAUCSL', 'TB3MS']]\n\nnum_lags  = 4  ## this is p\nnum_leads = 1  ## this is h\nX = pd.DataFrame()\n## Add the lagged values of Y\ncol = 'INDPRO'\nfor lag in range(0,num_lags):\n        # Shift each column in the DataFrame and name it with a lag suffix\n        X[f'{col}_lag{lag}'] = Yraw.shift(lag)\n\nfor col in Xraw.columns:\n    for lag in range(0,num_lags):\n        # Shift each column in the DataFrame and name it with a lag suffix\n        X[f'{col}_lag{lag}'] = Xraw[col].shift(lag)\n## Add a column on ones (for the intercept)\nX.insert(0, 'Ones', np.ones(len(X)))\n\n\n## X is now a DataFrame\nX.head()\n\n\n\n\n\n\n\n\n\nOnes\nINDPRO_lag0\nINDPRO_lag1\nINDPRO_lag2\nINDPRO_lag3\nCPIAUCSL_lag0\nCPIAUCSL_lag1\nCPIAUCSL_lag2\nCPIAUCSL_lag3\nTB3MS_lag0\nTB3MS_lag1\nTB3MS_lag2\nTB3MS_lag3\n\n\n\n\n0\n1.0\n0.014306\nNaN\nNaN\nNaN\n-0.000690\nNaN\nNaN\nNaN\n0.10\nNaN\nNaN\nNaN\n\n\n1\n1.0\n0.021075\n0.014306\nNaN\nNaN\n0.001380\n-0.000690\nNaN\nNaN\n0.15\n0.10\nNaN\nNaN\n\n\n2\n1.0\n0.014955\n0.021075\n0.014306\nNaN\n0.001723\n0.001380\n-0.000690\nNaN\n-0.11\n0.15\n0.10\nNaN\n\n\n3\n1.0\n0.001141\n0.014955\n0.021075\n0.014306\n0.000339\n0.001723\n0.001380\n-0.00069\n0.37\n-0.11\n0.15\n0.10\n\n\n4\n1.0\n-0.024240\n0.001141\n0.014955\n0.021075\n-0.001034\n0.000339\n0.001723\n0.00138\n-0.01\n0.37\n-0.11\n0.15\n\n\n\n\n\n\n\n\nNote that the first \\(p=\\)4 rows of X have missing values.\nThe vector \\(\\mathbf{y}\\) can be similarly created as\n\ny = Yraw.shift(-num_leads)\ny\n\n0      0.021075\n1      0.014955\n2      0.001141\n3     -0.024240\n4     -0.034465\n         ...   \n774   -0.008147\n775    0.002915\n776    0.000005\n777   -0.000951\n778         NaN\nName: INDPRO, Length: 779, dtype: float64\n\n\nThe variable y has missing values in the last h positions (it is not possible to lead the target beyond \\(T\\)).\nNotice also that we must keep the last row of X for constructing the forecast.\nNow we create two numpy arrays with the missing values stripped:\n\n## Save last row of X (converted to numpy)\nX_T = X.iloc[-1:].values\n## Subset getting only rows of X and y from p+1 to h-1\n## and convert to numpy array\ny = y.iloc[num_lags:-num_leads].values\nX = X.iloc[num_lags:-num_leads].values\n\nNow, we have to estimate the parameters and obtain the forecast.\n\n\nEstimation\nThe parameters of the model can be estimated by OLS (the OLS estimates the coefficient of the linear projection of \\(Y_{t+h}\\) on its lags and the lags of \\(X_t\\)).\nThe OLS estimator of \\(\\boldsymbol{\\beta}\\) is \\[\n\\hat{\\boldsymbol{\\beta}} = (X'X)^{-1}X'Y.\n\\]\nWhile this is the formula used to describe the OLS estimator, from a computational poijnt of view is much better to define the estimator as the solution of the set of linear equations: \\[\n(X'X)\\boldsymbol{\\beta} = X'Y\n\\]\nThe function solve can be used to solve this linear system of equation.\n\nfrom numpy.linalg import solve\n# Solving for the OLS estimator beta: (X'X)^{-1} X'Y\nbeta_ols = solve(X.T @ X, X.T @ y)\n\n## Produce the One step ahead forecast\n## % change month-to-month INDPRO\nforecast = X_T@beta_ols*100\n\nThe variable forecast contains now the one-step ahead (\\(h=1\\) forecast) of INDPRO. Since INDPRO has been transformed in logarithmic differences, we are forecasting the percentage change (and multiplying by 100 gives the forecast in percentage points).\nTo obtain the \\(h\\)-step ahead forecast, we must repeat all the above steps using a different h.\n\n\nForecasting Exercise\nHow good is the forecast that the model is producing? One thing we could do to assess the forecast’s quality is to wait for the new data on industrial production and see how big the forecasting error is. However, this evaluation would not be appropriate because we need to evaluate the forecast as if it were repeatedly used to forecast future values of the target variables. To properly assess the model and its ability to forecast INDPRO, we must keep producing forecasts and calculating the errors as new data arrive. This procedure would take time as we must wait for many months to have a series of errors that is large enough.\nA different approach is to do what is called a Real-time evaluation. A Real-time evaluation procedure consists of putting ourselves in the shoes of a forecaster who has been using the forecasting model for a long time.\nIn practice, that is what are the steps to follow to do a Real-time evaluation of the model:\n\nSet \\(T\\) such that the last observation of df coincides with December 1999;\nEstimate the model using the data up to \\(T\\)\nProduce \\(\\hat{Y}_{T+1}, \\hat{Y}_{T+2}, \\dots, \\hat{Y}_{T+H}\\)\nSince we have the actual data for January, February, …, we can calculate the forecasting errors of our model \\[\n\\hat{e}_{T+h} = \\hat{Y}_{T+h} - Y_{T+h}, \\,\\, h = 1,\\ldots, H.\n\\]\nSet \\(T = T+1\\) and do all the steps above.\n\nThe process results are a series of forecasting errors we can evaluate using several metrics. The most commonly used is the MSFE, which is defined as \\[\nMSFE_h = \\frac{1}{J}\\sum_{j=1}^J  \\hat{e}_{T+j+h}^2,\n\\] where \\(J\\) is the number of errors we collected through our real-time evaluation.\nThis assignment asks you to perform a real-time evaluation assessment of our simple forecasting model and calculate the MSFE for steps \\(h=1,4,8\\).\nAs a bonus, we can evaluate different models and see how they perform differently. For instance, you might consider different numbers of lags and/or different variables in the model.\n\nHint\nA sensible way to structure the code for real-time evaluation is to use several functions. For instance, you can define a function that calculates the forecast given the DataFrame.\n\ndef calculate_forecast(df_cleaned, p = 4, H = [1,4,8], end_date = '12/1/1999',target = 'INDPRO', xvars = ['CPIAUCSL', 'TB3MS']):\n\n    ## Subset df_cleaned to use only data up to end_date\n    rt_df = df_cleaned[df_cleaned['sasdate'] &lt;= pd.Timestamp(end_date)]\n    ## Get the actual values of target at different steps ahead\n    Y_actual = []\n    for h in H:\n        os = pd.Timestamp(end_date) + pd.DateOffset(months=h)\n        Y_actual.append(df_cleaned[df_cleaned['sasdate'] == os][target]*100)\n        ## Now Y contains the true values at T+H (multiplying * 100)\n\n    Yraw = rt_df[target]\n    Xraw = rt_df[xvars]\n\n    X = pd.DataFrame()\n    ## Add the lagged values of Y\n    for lag in range(0,p):\n        # Shift each column in the DataFrame and name it with a lag suffix\n        X[f'{target}_lag{lag}'] = Yraw.shift(lag)\n\n    for col in Xraw.columns:\n        for lag in range(0,p):\n            X[f'{col}_lag{lag}'] = Xraw[col].shift(lag)\n    \n    ## Add a column on ones (for the intercept)\n    X.insert(0, 'Ones', np.ones(len(X)))\n    \n    ## Save last row of X (converted to numpy)\n    X_T = X.iloc[-1:].values\n\n    ## While the X will be the same, Y needs to be leaded differently\n    Yhat = []\n    for h in H:\n        y_h = Yraw.shift(-h)\n        ## Subset getting only rows of X and y from p+1 to h-1\n        y = y_h.iloc[p:-h].values\n        X_ = X.iloc[p:-h].values\n        # Solving for the OLS estimator beta: (X'X)^{-1} X'Y\n        beta_ols = solve(X_.T @ X_, X_.T @ y)\n        ## Produce the One step ahead forecast\n        ## % change month-to-month INDPRO\n        Yhat.append(X_T@beta_ols*100)\n\n    ## Now calculate the forecasting error and return\n\n    return np.array(Y_actual) - np.array(Yhat)\n\nWith this function, you can calculate real-time errors by looping over the end_date to ensure you end the loop at the right time.\n\nt0 = pd.Timestamp('12/1/1999')\ne = []\nT = []\nfor j in range(0, 10):\n    t0 = t0 + pd.DateOffset(months=1)\n    print(f'Using data up to {t0}')\n    ehat = calculate_forecast(df_cleaned, p = 4, H = [1,4,8], end_date = t0)\n    e.append(ehat.flatten())\n    T.append(t0)\n\n## Create a pandas DataFrame from the list\nedf = pd.DataFrame(e)\n## Calculate the RMSFE, that is, the square root of the MSFE\nnp.sqrt(edf.apply(np.square).mean())\n\nUsing data up to 2000-01-01 00:00:00\nUsing data up to 2000-02-01 00:00:00\nUsing data up to 2000-03-01 00:00:00\nUsing data up to 2000-04-01 00:00:00\nUsing data up to 2000-05-01 00:00:00\nUsing data up to 2000-06-01 00:00:00\nUsing data up to 2000-07-01 00:00:00\nUsing data up to 2000-08-01 00:00:00\nUsing data up to 2000-09-01 00:00:00\nUsing data up to 2000-10-01 00:00:00\n\n\n0    0.337110\n1    0.512690\n2    0.624035\ndtype: float64\n\n\nYou may change the function calculate_forecast to output also the actual data end the forecast, so you can, for instance, construct a plot."
  },
  {
    "objectID": "junk/comptools_ass1.html#footnotes",
    "href": "junk/comptools_ass1.html#footnotes",
    "title": "Computational Tools for Macroeconometrics",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTheoretically, the number of lags for the target variables and the predictors could be different. Here, we consider the simpler case in which both are equal.↩︎"
  }
]